<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Awebone&#39;s Blog</title>
  <subtitle>见多方能识广，进而才可以融会贯通；取他人之所长，谦而才可以为我所用。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xuyanbo03.github.io/"/>
  <updated>2020-02-16T10:34:46.704Z</updated>
  <id>http://xuyanbo03.github.io/</id>
  
  <author>
    <name>Awebone</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ES6入门（一）</title>
    <link href="http://xuyanbo03.github.io/es6learn1.html"/>
    <id>http://xuyanbo03.github.io/es6learn1.html</id>
    <published>2017-07-13T16:00:00.000Z</published>
    <updated>2020-02-16T10:34:46.704Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6入门（一）"><a href="#ES6入门（一）" class="headerlink" title="ES6入门（一）"></a>ES6入门（一）</h1><h1 id="let和const"><a href="#let和const" class="headerlink" title="let和const"></a>let和const</h1><ul>
<li><p>不存在变量提升，一定在声明后使用</p>
</li>
<li><p>let绑定所在代码块，存在暂时性死区，只有当let和const声明变量后，变量才可获取和使用</p>
</li>
<li><p>不允许在一个代码块重复声明</p>
</li>
<li><p>const声明后要立即赋值</p>
</li>
<li><p>const只保证变量指向的地址不变，不保证该地址的数据不变</p>
</li>
</ul>
<a id="more"></a>
<h1 id="ES6六种声明变量的方法"><a href="#ES6六种声明变量的方法" class="headerlink" title="ES6六种声明变量的方法"></a>ES6六种声明变量的方法</h1><ul>
<li>var</li>
<li>function</li>
<li>let</li>
<li>const</li>
<li>import</li>
<li>class</li>
</ul>
<ul>
<li>跨模块变量使用export</li>
<li>全局变量和全局对象的属性<ul>
<li>ES5中，全局变量==全局对象的属性</li>
<li>ES6中，let、const、class声明的全局变量不等于全局对象的属性</li>
</ul>
</li>
</ul>
<h1 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h1><ul>
<li><p>允许按照一定模式，从数组和对象中提取值，对变量进行赋值</p>
</li>
<li><p>使用圆括号：赋值语句的非模式部分可以使用</p>
</li>
<li><p>数组</p>
<ul>
<li>模式匹配：只要等号两边的模式相同，左边变量被赋予对应值</li>
<li>不完全解构：等号左边的模式只匹配等号右边数组的一部分</li>
<li>允许指定默认值<ul>
<li>严格等于undefined，默认值才生效</li>
<li>设为null，默认值不会生效</li>
<li>默认为表达式，惰性求值</li>
<li>其他变量已赋值，默认值可为其他变量</li>
</ul>
</li>
</ul>
</li>
<li><p>对象</p>
<ul>
<li>变量必须与属性同名，先找到同名属性，再赋给对应的变量</li>
<li>可用于嵌套结构的对象</li>
<li>可指定默认值<ul>
<li>严格等于undefined，默认值才生效</li>
<li>允许等号左边不放置任何变量名</li>
</ul>
</li>
</ul>
</li>
<li><p>字符串</p>
<ul>
<li>被转换成类似数组的对象</li>
</ul>
</li>
<li><p>数值和布尔值</p>
<ul>
<li>先转换为对象</li>
</ul>
</li>
<li><p>函数</p>
<ul>
<li>参数解构赋值</li>
</ul>
</li>
<li><p>用途</p>
<ul>
<li>交换变量的值</li>
<li>从函数返回多个值</li>
<li>函数参数无次序的赋值</li>
<li>函数参数默认值</li>
<li>提取JSON数据（常用）</li>
<li>遍历Map结构（常用）</li>
<li>输入模块的指定（常用）</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ES6入门（一）&quot;&gt;&lt;a href=&quot;#ES6入门（一）&quot; class=&quot;headerlink&quot; title=&quot;ES6入门（一）&quot;&gt;&lt;/a&gt;ES6入门（一）&lt;/h1&gt;&lt;h1 id=&quot;let和const&quot;&gt;&lt;a href=&quot;#let和const&quot; class=&quot;headerlink&quot; title=&quot;let和const&quot;&gt;&lt;/a&gt;let和const&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;不存在变量提升，一定在声明后使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;let绑定所在代码块，存在暂时性死区，只有当let和const声明变量后，变量才可获取和使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不允许在一个代码块重复声明&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;const声明后要立即赋值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;const只保证变量指向的地址不变，不保证该地址的数据不变&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://xuyanbo03.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://xuyanbo03.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法JavaScript学习(四)</title>
    <link href="http://xuyanbo03.github.io/jsawealgorithms3.html"/>
    <id>http://xuyanbo03.github.io/jsawealgorithms3.html</id>
    <published>2017-07-10T16:00:00.000Z</published>
    <updated>2020-02-16T10:34:46.704Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构与算法JavaScript学习-四"><a href="#数据结构与算法JavaScript学习-四" class="headerlink" title="数据结构与算法JavaScript学习(四)"></a>数据结构与算法JavaScript学习(四)</h1><h1 id="高级算法"><a href="#高级算法" class="headerlink" title="高级算法"></a>高级算法</h1><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><a id="more"></a>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//斐波那契数列:递归</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (num===<span class="number">1</span>||num===<span class="number">2</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> fibonacci(num<span class="number">-1</span>)+fibonacci(num<span class="number">-2</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="非递归"><a href="#非递归" class="headerlink" title="非递归"></a>非递归</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//斐波那契数列:非递归</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> n1=<span class="number">1</span>,n2=<span class="number">1</span>,n=<span class="number">1</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">3</span>; i &lt;= num; i++) &#123;</div><div class="line">    n=n1+n2;</div><div class="line">    n1=n2;</div><div class="line">    n2=n;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> n;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//动态规划：将大问题转化成小问题</span></div><div class="line"><span class="comment">//最少硬币找零问题:找到n所需的最小硬币数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">dpMinCoinChange</span>(<span class="params">coins</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> coins=coins;</div><div class="line">  <span class="keyword">var</span> cache=&#123;&#125;;</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.makeChange=<span class="function"><span class="keyword">function</span> (<span class="params">amount</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> me=<span class="keyword">this</span>;</div><div class="line">    <span class="keyword">if</span> (!amount) &#123;<span class="comment">//判断为正</span></div><div class="line">      <span class="keyword">return</span> [];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (cache[amount]) &#123;<span class="comment">//判断是否有缓存</span></div><div class="line">      <span class="keyword">return</span> cache[amount];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> min=[],newMin,newAmount;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; coins.length; i++) &#123;<span class="comment">//对每个面额计算</span></div><div class="line">      <span class="keyword">var</span> coin=coins[i];</div><div class="line">      newAmount=amount-coin;</div><div class="line">      <span class="keyword">if</span> (newAmount&gt;=<span class="number">0</span>) &#123;</div><div class="line">        newMin=me.makeChange(newAmount);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (newAmount&gt;=<span class="number">0</span> &amp;&amp; (newMin.length&lt;min.length<span class="number">-1</span> || !min.length) &amp;&amp; (newMin.length || !newAmount)) &#123;<span class="comment">//判断newAmount是否有效，最小硬币数是否最优，newMin和newAmount是否合理</span></div><div class="line">        min=[coin].concat(newMin);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'new Min '</span>+min+ <span class="string">' for '</span>+amount);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> (cache[amount]=min);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//贪心算法：近似求解，通过局部最优达到全局最优</span></div><div class="line"><span class="comment">//最少硬币找零问题:找到n所需的最小硬币数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">txMinCoinChange</span>(<span class="params">coins</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> coins=coins;</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.makeChange=<span class="function"><span class="keyword">function</span>(<span class="params">amount</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> change=[],total=<span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = coins.length; i &gt;= <span class="number">0</span>; i--) &#123;<span class="comment">//对每个面额从大面额开始，从大到小依次</span></div><div class="line">      <span class="keyword">var</span> coin=coins[i];</div><div class="line">      <span class="keyword">while</span> (total+coin&lt;=amount) &#123;</div><div class="line">        change.push(coin);</div><div class="line">        total+=coin;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> change;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数据结构与算法JavaScript学习-四&quot;&gt;&lt;a href=&quot;#数据结构与算法JavaScript学习-四&quot; class=&quot;headerlink&quot; title=&quot;数据结构与算法JavaScript学习(四)&quot;&gt;&lt;/a&gt;数据结构与算法JavaScript学习(四)&lt;/h1&gt;&lt;h1 id=&quot;高级算法&quot;&gt;&lt;a href=&quot;#高级算法&quot; class=&quot;headerlink&quot; title=&quot;高级算法&quot;&gt;&lt;/a&gt;高级算法&lt;/h1&gt;&lt;h2 id=&quot;递归&quot;&gt;&lt;a href=&quot;#递归&quot; class=&quot;headerlink&quot; title=&quot;递归&quot;&gt;&lt;/a&gt;递归&lt;/h2&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://xuyanbo03.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="html" scheme="http://xuyanbo03.github.io/tags/html/"/>
    
      <category term="css" scheme="http://xuyanbo03.github.io/tags/css/"/>
    
      <category term="javascript" scheme="http://xuyanbo03.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法JavaScript学习(三)</title>
    <link href="http://xuyanbo03.github.io/jsawealgorithms2.html"/>
    <id>http://xuyanbo03.github.io/jsawealgorithms2.html</id>
    <published>2017-07-04T16:00:00.000Z</published>
    <updated>2020-02-16T10:34:46.704Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构与算法JavaScript学习-三"><a href="#数据结构与算法JavaScript学习-三" class="headerlink" title="数据结构与算法JavaScript学习(三)"></a>数据结构与算法JavaScript学习(三)</h1><h1 id="搜索算法"><a href="#搜索算法" class="headerlink" title="搜索算法"></a>搜索算法</h1><h2 id="顺序或线性搜索"><a href="#顺序或线性搜索" class="headerlink" title="顺序或线性搜索"></a>顺序或线性搜索</h2><a id="more"></a>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ArrayList</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> array=[];</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.insert=<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">    array.push(item);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.toString=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> array.join();</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="comment">//顺序搜索</span></div><div class="line">  <span class="keyword">this</span>.sequentialSearch=<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</div><div class="line">      <span class="keyword">if</span> (item===array[i]) &#123;</div><div class="line">        <span class="keyword">return</span> i;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="二分搜索"><a href="#二分搜索" class="headerlink" title="二分搜索"></a>二分搜索</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ArrayList</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> array=[];</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.insert=<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">    array.push(item);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.toString=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> array.join();</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="comment">//快速排序:分治递归</span></div><div class="line">  <span class="keyword">this</span>.quickSort=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    quick(array,<span class="number">0</span>,array.length<span class="number">-1</span>);</div><div class="line">  &#125;;</div><div class="line">  <span class="comment">//快排</span></div><div class="line">  <span class="keyword">var</span> quick=<span class="function"><span class="keyword">function</span> (<span class="params">array,left,right</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> index;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (array.length&gt;<span class="number">1</span>) &#123;</div><div class="line">      index=partition(array,left,right);</div><div class="line">      <span class="keyword">if</span> (left&lt;index<span class="number">-1</span>) &#123;</div><div class="line">        quick(array,left,index<span class="number">-1</span>);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (index&lt;right) &#123;</div><div class="line">        quick(array,index,right);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">  <span class="comment">//划分过程</span></div><div class="line">  <span class="keyword">var</span> partition=<span class="function"><span class="keyword">function</span>(<span class="params">array,left,right</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> pivot=array[<span class="built_in">Math</span>.floor((right+left)/<span class="number">2</span>)],i=left,j=right;<span class="comment">//选主元</span></div><div class="line"></div><div class="line">    <span class="keyword">while</span> (i&lt;=j) &#123;</div><div class="line">      <span class="keyword">while</span> (array[i]&lt;pivot) &#123;</div><div class="line">        i++;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">while</span> (array[j]&gt;pivot) &#123;</div><div class="line">        j--;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (i&lt;=j) &#123;</div><div class="line">        swapQuickStort(array,i,j);</div><div class="line">        i++;</div><div class="line">        j--;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> i;</div><div class="line">  &#125;；</div><div class="line">  <span class="comment">//交换数组元素</span></div><div class="line">  <span class="keyword">var</span> swapQuickStort=<span class="function"><span class="keyword">function</span> (<span class="params">array,index1,index2</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> aux=array[index1];</div><div class="line">    array[index1]=array[index2];</div><div class="line">    array[index2]=aux;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="comment">//二分搜索</span></div><div class="line">  <span class="keyword">this</span>.binarySearch=<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.quickSort();<span class="comment">//快速排序</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> low=<span class="number">0</span>,high=array.length<span class="number">-1</span>,mid,element;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (low&lt;=high) &#123;</div><div class="line">      mid=<span class="built_in">Math</span>.floor((low+high)/<span class="number">2</span>);</div><div class="line">      element=array[mid];</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (element&lt;item) &#123;</div><div class="line">        low=mid+<span class="number">1</span>;</div><div class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (element&gt;item) &#123;</div><div class="line">        high=mid<span class="number">-1</span>;</div><div class="line">      &#125;<span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> mid;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数据结构与算法JavaScript学习-三&quot;&gt;&lt;a href=&quot;#数据结构与算法JavaScript学习-三&quot; class=&quot;headerlink&quot; title=&quot;数据结构与算法JavaScript学习(三)&quot;&gt;&lt;/a&gt;数据结构与算法JavaScript学习(三)&lt;/h1&gt;&lt;h1 id=&quot;搜索算法&quot;&gt;&lt;a href=&quot;#搜索算法&quot; class=&quot;headerlink&quot; title=&quot;搜索算法&quot;&gt;&lt;/a&gt;搜索算法&lt;/h1&gt;&lt;h2 id=&quot;顺序或线性搜索&quot;&gt;&lt;a href=&quot;#顺序或线性搜索&quot; class=&quot;headerlink&quot; title=&quot;顺序或线性搜索&quot;&gt;&lt;/a&gt;顺序或线性搜索&lt;/h2&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://xuyanbo03.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="html" scheme="http://xuyanbo03.github.io/tags/html/"/>
    
      <category term="css" scheme="http://xuyanbo03.github.io/tags/css/"/>
    
      <category term="javascript" scheme="http://xuyanbo03.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB基础学习</title>
    <link href="http://xuyanbo03.github.io/mongo-note.html"/>
    <id>http://xuyanbo03.github.io/mongo-note.html</id>
    <published>2017-06-30T16:00:00.000Z</published>
    <updated>2020-02-22T03:58:47.562Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MongoDB基础学习"><a href="#MongoDB基础学习" class="headerlink" title="MongoDB基础学习"></a>MongoDB基础学习</h1><blockquote>
<p>MongoDB是一个跨平台，面向文档的数据库，提供高性能，高可用性和易于扩展，总结知识点分享给与我一样刚入门MongoDB的人。</p>
</blockquote>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul>
<li>数据库：数据库是一个集合的物理容器。每个数据库获取其自己设定在文件系统上的文件。一个单一的MongoDB服务器通常有多个数据库</li>
<li>集合：集合是一组MongoDB的文件。它与一个RDBMS表是等效的。一个集合存在于数据库中。集合不强制执行模式。集合中的文档可以有不同的字段。</li>
<li>文档：文档是一组键值对。文档具有动态模式。动态模式是指，在同一个集合的文件不必具有相同一组集合的文档字段或结构，并且相同的字段可以保持不同类型的数据。</li>
</ul>
<a id="more"></a>
<ul>
<li>文档是MongoDB中数据的基本单元</li>
<li>在MongoDB中，一个MongoDB实例可以承载多个数据库，每个数据库拥有0或多个集合，一个集合拥有多个文档</li>
<li>在同一个MongoDB服务器上存放多个应用那个程序或用户的数据，需要使用不同的数据库</li>
<li>使用BSON格式</li>
</ul>
<h2 id="使用MongoDB在哪些场景"><a href="#使用MongoDB在哪些场景" class="headerlink" title="使用MongoDB在哪些场景"></a>使用MongoDB在哪些场景</h2><ul>
<li>大而复杂的数据</li>
<li>移动和社会基础设施数据</li>
<li>内容管理和交付</li>
<li>用户数据管理</li>
<li>数据中心</li>
</ul>
<h2 id="初始化的数据库"><a href="#初始化的数据库" class="headerlink" title="初始化的数据库"></a>初始化的数据库</h2><ul>
<li>admin：root数据库，有数据库所以权限</li>
<li>local：存储所以本地集合</li>
<li>config：存储分片信息</li>
</ul>
<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><ul>
<li>null：空或不存在</li>
<li>布尔型：true或false</li>
<li>数值：默认64位浮点型数值</li>
<li>字符串：UTF-8</li>
<li>日期：自新世纪以来经过的毫秒，不存储时区</li>
<li>正则表达式：与js语法相同</li>
<li>数组：数据列表或数据集</li>
<li>内嵌文档：对象嵌套</li>
<li>对象<ul>
<li>对象id是一个12字节的ID，是一个由24个十六进制数字组成的字符串，作为文档唯一标识，一秒钟最多允许每个进程拥有2563个不同的ObjectId</li>
<li>ObjectId前四个字节是从标准纪元开始的时间戳，单位为秒</li>
<li>接下来3个字节是所在主机的唯一标识符，机器主机名的散列值</li>
<li>接下来2个字节来自产生ObjectId的进程的进程标识符PID</li>
<li>最后3个字节是一个自动增加的计数器</li>
</ul>
</li>
<li>二进制数据</li>
<li>代码</li>
</ul>
<h2 id="MongoDB-shell"><a href="#MongoDB-shell" class="headerlink" title="MongoDB shell"></a>MongoDB shell</h2><ul>
<li><p>启动时会连到test数据库，并将数据库连接赋值给全局变量db</p>
</li>
<li><p>连接到不同的数据库或服务器</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">    mongo --nodb</div><div class="line">connect=new Mongo(&quot;host:27017&quot;)</div><div class="line">    db=connect.getDB(&quot;myDB&quot;)</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>帮助</p>
<ul>
<li><code>help</code></li>
<li><code>db.foo.update</code>，方法不加括号可查看相应函数的源码</li>
</ul>
</li>
<li><p>创建<code>.mongorc.js</code></p>
<ul>
<li>频繁加载的脚本</li>
<li>移除比较危险的shell辅助函数</li>
<li>指定<code>--norc</code>，可以禁止加载<code>.mongorc.js</code></li>
</ul>
</li>
<li><p>定制shell提示：将prompt变量设为一个字符串或函数</p>
</li>
<li><p>编辑符合变量：设置EDITOR</p>
</li>
</ul>
<h2 id="四个基本操作：创建、读取、更新、删除（CRUD）"><a href="#四个基本操作：创建、读取、更新、删除（CRUD）" class="headerlink" title="四个基本操作：创建、读取、更新、删除（CRUD）"></a>四个基本操作：创建、读取、更新、删除（CRUD）</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><ul>
<li>单个插入：<code>insert</code></li>
<li>批量插入：<code>batchInsert</code></li>
</ul>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ul>
<li>删除文档：<code>remove</code>，可接受一个查询文档作为参数</li>
<li>删除集合：<code>drop</code>，不能指定条件</li>
</ul>
<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><ul>
<li><code>update</code>：必须接受两个参数，第一个匹配待更新文档，第二个是修改器文档。接受第三个参数，若为true，则表示这是upsert。接受第四个参数，若为true，则表示更新所有匹配的文档。</li>
<li>原子性的更新修改器<ul>
<li><code>$set</code>：指定一个字段的值</li>
<li><code>$unset</code>：删除指定键</li>
<li><code>$inc</code>：增加已有键的值，不存在则创建，只能用于整型、长整型或双精度浮点型的值</li>
<li><code>$push</code>：向已有数组末尾加入一个元素<ul>
<li><code>$each</code>：通过一次<code>$push</code>操作添加多个值</li>
<li><code>$slice</code>：设置最大长度，必须为负整数，相当于建立队列，保留最后的元素</li>
<li><code>$sort</code>：清理元素</li>
</ul>
</li>
<li><code>$addToSet</code>：添加新数据，可以避免重复</li>
<li><code>$pop</code>：可以从数组任何一端删除元素</li>
</ul>
</li>
<li><code>$pull</code>：删除所有匹配的文档</li>
<li><code>upsert</code>：若未找到符合更新条件的文档，则以此为条件创建新文档；若找到相应文档，正常更新。可用于创建又可用于更新。</li>
</ul>
<h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><p><strong>find和findOne</strong></p>
<ul>
<li>第一个参数用于指定查询条件</li>
<li><p>第二个参数指定想要返回的键</p>
</li>
<li><p>查询条件</p>
<ul>
<li><code>$lt,$lte,$gt,$gte,$ne</code>对应小于、小于等于、大于、大于等于、不等于</li>
<li><code>$in</code>：用来查询一个键的多个值</li>
<li><p><code>$or</code>：在多个键中查询任意给定值</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.raffle.find(&#123;<span class="string">"$or"</span>:[&#123;<span class="string">"tricket_no"</span>:&#123;<span class="string">"in"</span>:[<span class="number">755</span>,<span class="number">542</span>,<span class="number">390</span>]&#125;&#125;,&#123;<span class="string">"winner"</span>:<span class="literal">true</span>&#125;]&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p><code>$not</code>：用来查询与特定模式不匹配的文档</p>
</li>
<li><code>$exists</code>：判定键值是否存在</li>
<li><code>$maxscan</code>：指定本次查询文档数量的上限</li>
<li><code>$min</code>：强制指定下边界</li>
<li><code>$max</code>：强制指定上边界</li>
</ul>
</li>
<li><p><code>$showDiskLoc</code>：用于显示结果在磁盘的位置</p>
</li>
<li><p>数组查询</p>
<ul>
<li><code>$all</code>：通过多个元素匹配数组</li>
<li><code>$size</code>：查询特定长度的数组</li>
<li><code>$slice</code>：返回某个键匹配的数组元素的一个子集</li>
<li><code>$elemMatch</code>：指定一组添加，只可用于数组</li>
</ul>
</li>
<li><p>查询函数</p>
<ul>
<li><code>limit</code>：限制返回数量</li>
<li><code>skip</code>：忽略一定数量的结果</li>
<li><code>sort</code>：接受一个对象作为参数，键为文档键名，值为排序方向（1为升序，-1为降序）</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MongoDB基础学习&quot;&gt;&lt;a href=&quot;#MongoDB基础学习&quot; class=&quot;headerlink&quot; title=&quot;MongoDB基础学习&quot;&gt;&lt;/a&gt;MongoDB基础学习&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;MongoDB是一个跨平台，面向文档的数据库，提供高性能，高可用性和易于扩展，总结知识点分享给与我一样刚入门MongoDB的人。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;数据库：数据库是一个集合的物理容器。每个数据库获取其自己设定在文件系统上的文件。一个单一的MongoDB服务器通常有多个数据库&lt;/li&gt;
&lt;li&gt;集合：集合是一组MongoDB的文件。它与一个RDBMS表是等效的。一个集合存在于数据库中。集合不强制执行模式。集合中的文档可以有不同的字段。&lt;/li&gt;
&lt;li&gt;文档：文档是一组键值对。文档具有动态模式。动态模式是指，在同一个集合的文件不必具有相同一组集合的文档字段或结构，并且相同的字段可以保持不同类型的数据。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://xuyanbo03.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MongoDB" scheme="http://xuyanbo03.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法JavaScript学习(二)</title>
    <link href="http://xuyanbo03.github.io/jsawealgorithms1.html"/>
    <id>http://xuyanbo03.github.io/jsawealgorithms1.html</id>
    <published>2017-06-29T16:00:00.000Z</published>
    <updated>2020-02-16T10:34:46.704Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构与算法JavaScript学习-二"><a href="#数据结构与算法JavaScript学习-二" class="headerlink" title="数据结构与算法JavaScript学习(二)"></a>数据结构与算法JavaScript学习(二)</h1><h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><a id="more"></a>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ArrayList</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> array=[];</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.insert=<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">    array.push(item);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.toString=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> array.join();</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="comment">//交换两个数</span></div><div class="line">  <span class="keyword">var</span> swap=<span class="function"><span class="keyword">function</span>(<span class="params">index1,index2</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> aux=array[index1];</div><div class="line">    array[index1]=array[index2];</div><div class="line">    array[index2]=aux;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="comment">//改进冒泡排序</span></div><div class="line">  <span class="keyword">this</span>.modifiedBubbleSort=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> length=array.length;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;<span class="comment">//控制数组经过多少轮排序</span></div><div class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;length<span class="number">-1</span>-i;i++)&#123;<span class="comment">//从第一位迭代至倒数第二位</span></div><div class="line">        <span class="keyword">if</span>(array[j]&gt;array[j+<span class="number">1</span>])&#123;<span class="comment">//当前项和下一项比较</span></div><div class="line">          swap(j,j+<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ArrayList</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> array=[];</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.insert=<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">    array.push(item);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.toString=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> array.join();</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="comment">//交换两个数</span></div><div class="line">  <span class="keyword">var</span> swap=<span class="function"><span class="keyword">function</span>(<span class="params">index1,index2</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> aux=array[index1];</div><div class="line">    array[index1]=array[index2];</div><div class="line">    array[index2]=aux;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.selectionSort=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> length=array.length,indexMin;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;length<span class="number">-1</span>;i++)&#123;<span class="comment">//迭代数组</span></div><div class="line">      indexMin=i;<span class="comment">//数组第一个为最小值</span></div><div class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> j=i;j&lt;length;j++)&#123;<span class="comment">//从当前i至数组结束</span></div><div class="line">        <span class="keyword">if</span>(array[indexMin]&gt;array[j])&#123;</div><div class="line">          indexMin=j;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span>(i!==indexMin)&#123;</div><div class="line">        swap(i,indexMin);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ArrayList</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> array=[];</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.insert=<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">    array.push(item);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.toString=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> array.join();</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.insertionSort=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> length=array.length,j,temp;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; length; i++) &#123;<span class="comment">//迭代数组，默认第一项排序</span></div><div class="line">      j=i;<span class="comment">//初始化一个辅助变量</span></div><div class="line">      temp=array[i];</div><div class="line">      <span class="keyword">while</span> (j&gt;<span class="number">0</span>&amp;&amp;array[j<span class="number">-1</span>]&gt;temp) &#123;<span class="comment">//找到位置，前面的值比此值大</span></div><div class="line">        array[j]=array[j<span class="number">-1</span>];<span class="comment">//交换</span></div><div class="line">        j--;<span class="comment">//j减少</span></div><div class="line">      &#125;</div><div class="line">      array[j]=temp;<span class="comment">//赋值</span></div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ArrayList</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> array=[];</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.insert=<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">    array.push(item);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.toString=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> array.join();</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="comment">//归并排序:分治递归算法</span></div><div class="line">  <span class="keyword">this</span>.mergeSort=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    array=mergeSortRec(array);</div><div class="line">  &#125;;</div><div class="line">  <span class="comment">//将大数组分成小数组</span></div><div class="line">  <span class="keyword">var</span> mergeSortRec=<span class="function"><span class="keyword">function</span> (<span class="params">array</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> length=array.length;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (length===<span class="number">1</span>) &#123;</div><div class="line">      <span class="keyword">return</span> array;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> mid=<span class="built_in">Math</span>.floor(length/<span class="number">2</span>),left=array.slice(<span class="number">0</span>,mmid),right=array.slice(mid,length);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> merge(mergeSortRec(left),mergeSortRec(right));</div><div class="line">  &#125;;</div><div class="line">  <span class="comment">//合并小数组</span></div><div class="line">  <span class="keyword">var</span> merge=<span class="function"><span class="keyword">function</span>(<span class="params">left,right</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> result=[],il=<span class="number">0</span>,ir=<span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (il&lt;left.length &amp;&amp; ir&lt;right.length) &#123;</div><div class="line">      <span class="keyword">if</span> (left[il]&lt;right[ir]) &#123;</div><div class="line">        result.push(left[il++]);</div><div class="line">      &#125;<span class="keyword">else</span> &#123;</div><div class="line">        result.push(right[ir++]);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (il&lt;left.length) &#123;</div><div class="line">      result.push(left[il++]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (il&lt;right.length) &#123;</div><div class="line">      result.push(right[ir++]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ArrayList</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> array=[];</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.insert=<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">    array.push(item);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.toString=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> array.join();</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="comment">//快速排序:分治递归</span></div><div class="line">  <span class="keyword">this</span>.quickSort=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    quick(array,<span class="number">0</span>,array.length<span class="number">-1</span>);</div><div class="line">  &#125;;</div><div class="line">  <span class="comment">//快排</span></div><div class="line">  <span class="keyword">var</span> quick=<span class="function"><span class="keyword">function</span> (<span class="params">array,left,right</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> index;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (array.length&gt;<span class="number">1</span>) &#123;</div><div class="line">      index=partition(array,left,right);</div><div class="line">      <span class="keyword">if</span> (left&lt;index<span class="number">-1</span>) &#123;</div><div class="line">        quick(array,left,index<span class="number">-1</span>);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (index&lt;right) &#123;</div><div class="line">        quick(array,index,right);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">  <span class="comment">//划分过程</span></div><div class="line">  <span class="keyword">var</span> partition=<span class="function"><span class="keyword">function</span>(<span class="params">array,left,right</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> pivot=array[<span class="built_in">Math</span>.floor((right+left)/<span class="number">2</span>)],i=left,j=right;<span class="comment">//选主元</span></div><div class="line"></div><div class="line">    <span class="keyword">while</span> (i&lt;=j) &#123;</div><div class="line">      <span class="keyword">while</span> (array[i]&lt;pivot) &#123;</div><div class="line">        i++;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">while</span> (array[j]&gt;pivot) &#123;</div><div class="line">        j--;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (i&lt;=j) &#123;</div><div class="line">        swapQuickStort(array,i,j);</div><div class="line">        i++;</div><div class="line">        j--;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> i;</div><div class="line">  &#125;；</div><div class="line">  <span class="comment">//交换数组元素</span></div><div class="line">  <span class="keyword">var</span> swapQuickStort=<span class="function"><span class="keyword">function</span> (<span class="params">array,index1,index2</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> aux=array[index1];</div><div class="line">    array[index1]=array[index2];</div><div class="line">    array[index2]=aux;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数据结构与算法JavaScript学习-二&quot;&gt;&lt;a href=&quot;#数据结构与算法JavaScript学习-二&quot; class=&quot;headerlink&quot; title=&quot;数据结构与算法JavaScript学习(二)&quot;&gt;&lt;/a&gt;数据结构与算法JavaScript学习(二)&lt;/h1&gt;&lt;h1 id=&quot;排序算法&quot;&gt;&lt;a href=&quot;#排序算法&quot; class=&quot;headerlink&quot; title=&quot;排序算法&quot;&gt;&lt;/a&gt;排序算法&lt;/h1&gt;&lt;h2 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h2&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://xuyanbo03.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="html" scheme="http://xuyanbo03.github.io/tags/html/"/>
    
      <category term="css" scheme="http://xuyanbo03.github.io/tags/css/"/>
    
      <category term="javascript" scheme="http://xuyanbo03.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>FreeCodeCamp学习笔记（四）</title>
    <link href="http://xuyanbo03.github.io/FreeCodeCamplearn4.html"/>
    <id>http://xuyanbo03.github.io/FreeCodeCamplearn4.html</id>
    <published>2017-05-16T16:00:00.000Z</published>
    <updated>2020-02-16T10:34:46.673Z</updated>
    
    <content type="html"><![CDATA[<h1 id="FreeCodeCamp学习笔记（四）"><a href="#FreeCodeCamp学习笔记（四）" class="headerlink" title="FreeCodeCamp学习笔记（四）"></a>FreeCodeCamp学习笔记（四）</h1><h1 id="JavaScript基础"><a href="#JavaScript基础" class="headerlink" title="JavaScript基础"></a>JavaScript基础</h1><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><ul>
<li>一个条件语句只能执行一次代码，而一个循环语句可以多次执行代码。</li>
</ul>
<a id="more"></a>
<ul>
<li><p>JavaScript 中最常见的循环就是“for循环”。</p>
<ul>
<li><p>for循环中的三个表达式用分号隔开：for ([初始化]; [条件判断]; [计数器])</p>
</li>
<li><p>初始化语句只会在执行循环开始之前执行一次。它通常用于定义和设置你的循环变量。</p>
</li>
<li><p>条件判断语句会在每一轮循环的开始执行，只要条件判断为 true 就会继续执行循环。当条件为 false的时候，循环将停止执行。这意味着，如果条件在一开始就为 false，这个循环将不会执行。</p>
</li>
<li><p>计数器是在每一轮循环结束时执行，通常用于递增或递减。</p>
</li>
<li><p>for循环可以按照我们指定的顺序来迭代，通过更改我们的 计数器，我们可以按照偶数顺序来迭代。</p>
</li>
<li><p>for循环也可以逆向迭代，只要我们定义好合适的条件。</p>
</li>
<li><p>迭代输出一个数组的每个元素是 JavaScript 中的常见需求， for 循环可以做到这一点。记住数组的索引从零开始的，这意味着数组的最后一个元素的下标是：数组的长度 - 1。</p>
</li>
<li><p>如果你有一个二维数组，可以使用相同的逻辑，先遍历外面的数组，再遍历里面的子数组。对于内部循环，我们可以通过 arr[i] 的 .length 来获得子数组的长度，因为 arr[i] 的本身就是一个数组。</p>
</li>
</ul>
</li>
<li><p>另一种类型的 JavaScript 循环被称为while循环，因为它规定，当（while）条件为真，循环才会执行，反之不执行。</p>
</li>
</ul>
<h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><ul>
<li><p>Math.random()用来生成一个在0(包括0)到1(不包括1)之间的随机小数，因此Math.random()可能返回0但绝不会返回1。要生成的随机数是在两个指定的数之间。</p>
</li>
<li><p>用 Math.floor() 向下取整 获得它最近的整数</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">20</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>定义一个最小值和一个最大值。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>)) + min</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h2><ul>
<li><p>Regular expressions 正则表达式被用来根据某种匹配模式来寻找strings中的某些单词。</p>
</li>
<li><p>我们可以把这个正则表达式分成几段：</p>
<ul>
<li><p>/ 是这个正则表达式的头部</p>
</li>
<li><p>the 是我们想要匹配的模式</p>
</li>
<li><p>/ 是这个正则表达式的尾部</p>
</li>
<li><p>g 代表着 global(全局)，意味着返回所有的匹配而不仅仅是第一个。</p>
</li>
<li><p>i 代表着忽略大小写，意思是当我们寻找匹配的字符串的时候忽略掉字母的大小写。</p>
</li>
</ul>
</li>
<li><p>我们可以在正则表达式中使用特殊选择器来选取特殊类型的值。</p>
<ul>
<li><p>特殊选择器中的一种就是数字选择器<code>\d</code>，意思是被用来获取一个字符串的数字.在JavaScript中, 数字选择器类似于: <code>/\d/g</code>。</p>
</li>
<li><p>在选择器后面添加一个加号标记(+)，例如：<code>/\d+/g</code>，它允许这个正则表达式匹配一个或更多数字。尾部的g是’global’的简写，意思是允许这个正则表达式 找到所有的匹配而不是仅仅找到第一个匹配。</p>
</li>
<li><p>我们也可以使用正则表达式选择器 <code>\s</code> 来选择一个字符串中的空白。空白字符有<code>&quot; &quot; (空格符)、\r (回车符)、\n (换行符)、\t (制表符) 和 \f (换页符)</code>。空白正则表达式类似于：<code>/\s+/g</code></p>
</li>
<li><p>你可以用正则表达式选择器的大写版本 来转化任何匹配。举个例子：<code>\s</code> 匹配任何空白字符，<code>\S</code> 匹配任何非空白字符。</p>
</li>
</ul>
</li>
</ul>
<h2 id="JSON与API"><a href="#JSON与API" class="headerlink" title="JSON与API"></a>JSON与API</h2><ul>
<li><p>JavaScript Object Notation 简称 JSON，它使用JavaScript对象的格式来存储数据。JSON是灵活的，因为它允许数据结构是字符串，数字，布尔值，字符串，和对象的任意组合。</p>
</li>
<li><p>数组中有多个 JSON 对象的时候，对象与对象之间要用逗号隔开。</p>
</li>
<li><p>通过串联起来的点操作符或中括号操作符来访问JSON对象的嵌套属性。因为属性的名字带有空格，请使用中括号操作符来访问属性的值。</p>
</li>
<li><p>JSON对象可以嵌套对象和数组。与访问嵌套对象一样，用中括号操作符同样可以访问嵌套数组。</p>
</li>
<li><p>函数返回的永远是整个对象</p>
</li>
<li><p>使用中括号操作符来访问对象的变量属性</p>
</li>
<li><p>JSON是一种非常简洁的数据格式。它通常表现为了两种形式，一种为单个对象，一种为多个对象</p>
<ul>
<li><p>单个对象类似于：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="attr">name</span>:<span class="string">'盖伦'</span>,<span class="attr">advantage</span>:<span class="string">'单挑无敌'</span>&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>多个对象类似于：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[&#123;<span class="attr">name</span>:<span class="string">'盖伦'</span>,<span class="attr">advantage</span>:<span class="string">'单挑无敌'</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">'诺克'</span>,<span class="attr">advantage</span>:<span class="string">'上单霸主'</span>&#125;]</div></pre></td></tr></table></figure>
</li>
<li><p>每个对象属性和属性值的组合就是我们经常听到的”键值对(key-value pairs)”。</p>
</li>
</ul>
</li>
<li><p>当你需要根据服务器返回的数据来动态改变页面的时候，应用程序接口(API)就派上用场了。API——应用程序接口(Application Programming Interface)是计算机之间相互交流沟通的工具。</p>
</li>
<li><p>许多网站的应用程序接口(API)都是通过一种称为JSON格式的数据来传输的，JSON 是 JavaScript Object Notation的简写。</p>
</li>
</ul>
<p><strong>举例：</strong></p>
<ul>
<li><p>从JSON API中获得了数据：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$.getJSON(<span class="string">"/json/cats.json"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">json</span>) </span>&#123;</div><div class="line">  $(<span class="string">".message"</span>).html(<span class="built_in">JSON</span>.stringify(json));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>把它们展现到我们的HTML页面中吧。</p>
<ul>
<li><p>使用.forEach()函数来循环遍历JSON数据写到html变量中。</p>
</li>
<li><p>首先我们定义一个HTML变量，<code>var html = &quot;&quot;;</code> 。</p>
</li>
<li><p>然后，我们使用.forEach()函数来循环遍历JSON数据写到html变量中，最后把html变量显示到我们的页面中。</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">json.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> keys = <span class="built_in">Object</span>.keys(val);</div><div class="line">  html += <span class="string">"&lt;div class = 'cat'&gt;"</span>;</div><div class="line">  keys.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</div><div class="line">    html += <span class="string">"&lt;b&gt;"</span> + key + <span class="string">"&lt;/b&gt;: "</span> + val[key] + <span class="string">"&lt;br&gt;"</span>;</div><div class="line">  &#125;);</div><div class="line">  html += <span class="string">"&lt;/div&gt;&lt;br&gt;"</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>获得的JSON数组中，每个对象都包含了一个以imageLink为键(key)，以猫的图片的url为值(value)的键值对。</p>
<p>遍历,用imageLink的属性来显示img元素的图片。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">html += <span class="string">"&lt;img src = '"</span> + val.imageLink + <span class="string">"'&gt;"</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>不想把所有从JSON API中得到的图片都展现出来，可以在遍历之前做一次过滤。把其中 “id” 键的值为1的图片过滤掉。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">json = json.filter(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (val.id !== <span class="number">1</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>可以通过浏览器navigator获得我们当前所在的位置geolocation。位置的信息包括经度longitude和纬度latitude。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (navigator.geolocation) &#123;</div><div class="line">  navigator.geolocation.getCurrentPosition(<span class="function"><span class="keyword">function</span>(<span class="params">position</span>) </span>&#123;</div><div class="line">    $(<span class="string">"#data"</span>).html(<span class="string">"latitude: "</span> + position.coords.latitude + <span class="string">"&lt;br&gt;longitude: "</span> + position.coords.longitude);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="Object对象"><a href="#Object对象" class="headerlink" title="Object对象"></a>Object对象</h1><ul>
<li><p>可以使用构造函数来创建对象。</p>
</li>
<li><p>构造函数通常使用大写字母开头，以便把自己和其他普通函数区别开。</p>
<p>下面便是一个构造函数：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Car = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.wheels = <span class="number">4</span>;</div><div class="line">  <span class="keyword">this</span>.engines = <span class="number">1</span>;</div><div class="line">  <span class="keyword">this</span>.seats = <span class="number">1</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>在构造函数中，this 指向被此构造函数创建出来的对象 。所以当我们在构造函数中写：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.wheels = <span class="number">4</span>;</div></pre></td></tr></table></figure>
<ul>
<li>创建出来的新对象将带有 wheels 属性，并且赋值为 4.</li>
</ul>
</li>
</ul>
<ul>
<li><p>构造函数描述了它所创建出来的对象。</p>
</li>
<li><p>使用构造函数时，我们通过在它前面使用 new 关键字 来对它进行调用，如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myCar = <span class="keyword">new</span> Car();</div></pre></td></tr></table></figure>
<ul>
<li><p>myCar 现在成为了 Car 的一个实例(instance），它被构造函数描述成下面的样子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">wheels</span>: <span class="number">4</span>,</div><div class="line">  <span class="attr">engines</span>: <span class="number">1</span>,</div><div class="line">  <span class="attr">seats</span>: <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>要使用 new 关键字去调用构造函数。因为只有这样，Javascript才知道这是要去构造一个新对象 ，并且把构造函数中的 this 指向这个新对象。</p>
</li>
<li><p>当 myCar（即 Car 的一个 实例 ）创建后，他可以像普通对象一样被使用，包括创建、访问、修改它的属性等，就像我们使用其他对象一样。</p>
</li>
</ul>
</li>
<li><p>对象拥有自己的特征，称为属性，对象还有自己的函数，称为方法。</p>
</li>
<li><p>构造函数中，我们使用了 this 指向当前（将要被创建的）对象中的公有属性 。</p>
</li>
<li><p>我们也可以创建私有属性和私有方法，它们两个在对象外部是不可访问的。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;FreeCodeCamp学习笔记（四）&quot;&gt;&lt;a href=&quot;#FreeCodeCamp学习笔记（四）&quot; class=&quot;headerlink&quot; title=&quot;FreeCodeCamp学习笔记（四）&quot;&gt;&lt;/a&gt;FreeCodeCamp学习笔记（四）&lt;/h1&gt;&lt;h1 id=&quot;JavaScript基础&quot;&gt;&lt;a href=&quot;#JavaScript基础&quot; class=&quot;headerlink&quot; title=&quot;JavaScript基础&quot;&gt;&lt;/a&gt;JavaScript基础&lt;/h1&gt;&lt;h2 id=&quot;循环&quot;&gt;&lt;a href=&quot;#循环&quot; class=&quot;headerlink&quot; title=&quot;循环&quot;&gt;&lt;/a&gt;循环&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;一个条件语句只能执行一次代码，而一个循环语句可以多次执行代码。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://xuyanbo03.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="html" scheme="http://xuyanbo03.github.io/tags/html/"/>
    
      <category term="css" scheme="http://xuyanbo03.github.io/tags/css/"/>
    
      <category term="jquery" scheme="http://xuyanbo03.github.io/tags/jquery/"/>
    
      <category term="FreeCodeCamp" scheme="http://xuyanbo03.github.io/tags/FreeCodeCamp/"/>
    
  </entry>
  
  <entry>
    <title>reeCodeCamp学习笔记（三）</title>
    <link href="http://xuyanbo03.github.io/FreeCodeCamplearn3.html"/>
    <id>http://xuyanbo03.github.io/FreeCodeCamplearn3.html</id>
    <published>2017-05-15T16:00:00.000Z</published>
    <updated>2020-02-16T10:34:46.673Z</updated>
    
    <content type="html"><![CDATA[<h1 id="FreeCodeCamp学习笔记（三）"><a href="#FreeCodeCamp学习笔记（三）" class="headerlink" title="FreeCodeCamp学习笔记（三）"></a>FreeCodeCamp学习笔记（三）</h1><h1 id="chrome调试学习"><a href="#chrome调试学习" class="headerlink" title="chrome调试学习"></a>chrome调试学习</h1><h2 id="elements标签"><a href="#elements标签" class="headerlink" title="elements标签"></a>elements标签</h2><ul>
<li>在chrome浏览器中右击选中<code>Inspect element</code>即可访问elements标签，然后你就可以随便修改元素文本，元素标签和任何其他CSS或者HTML。</li>
</ul>
<a id="more"></a>
<ul>
<li><p>这些修改不会自动保存，不能当做IDE或者可以保存内容的编辑器。你可以使用chrome中的’persistent authoring’功能去保存更改。</p>
</li>
<li><p>记住这里层叠，继承和其他CSS规则都可以使用，另外，被覆盖的式样会以穿越文字的横线的形式展示。</p>
</li>
<li><p>需要注意的是现在”树”中看到的代码是当前的HTML，而不是页面加载时的代码。如果你用JavaScript或Jquery来改变页面元素，”树”就会更新。</p>
</li>
<li><p>Padding，border和margin都很容易在右下角的彩色盒子里面检查和编辑。</p>
</li>
</ul>
<h2 id="network标签"><a href="#network标签" class="headerlink" title="network标签"></a>network标签</h2><ul>
<li><p>network标签页是用来回答’页面中哪个部分最耗时间’或’哪个调用初始化了网络请求’</p>
</li>
<li><p>network仪表盘记录了页面中每个元素加载的详细信息。</p>
</li>
<li><p>每一个请求都记录在network仪表盘的底部日志中</p>
</li>
<li><p>观察底部的线条，你会注意到彩色图案。每一个颜色都代表了请求中的不同类型内容。</p>
</li>
<li><p>线越长代表网络耗时越大，我们最终目标就是缩短线长。如果出现长线条，说明某些内容拖慢了整个网页。</p>
</li>
<li><p>点击请求日志，会看到更加详细的请求信息。</p>
</li>
</ul>
<h2 id="Sources标签"><a href="#Sources标签" class="headerlink" title="Sources标签"></a>Sources标签</h2><ul>
<li><p>Sources标签页对调试JavaScript帮助很大。项目越大，越难准确找到问题所在。</p>
</li>
<li><p>可以对代码的不同部分设置断点，代码会到此停止执行。</p>
</li>
<li><p>有很多种断点类型可以使用，如一行特定代码，一个DOM事件，XMLHTTP请求或一个JavaScript事件。</p>
</li>
<li><p>设置好断电之后，浏览器在进入这段代码或事件时，会暂停执行。</p>
</li>
<li><p>通过减缓代码执行，我们就有机会仔细观察每一个设置点，准确跟踪页面行为。</p>
</li>
<li><p>一旦断点设置好，我们就可以逐步浏览和检查页面中断点处的代码。</p>
</li>
<li><p>和elements标签一样，可以实时编辑代码观察结果，不过记得在别处保存更改。</p>
</li>
</ul>
<h2 id="Timeline-面板"><a href="#Timeline-面板" class="headerlink" title="Timeline 面板"></a>Timeline 面板</h2><ul>
<li><p>Timeline 面板可以在应用运行时记录和分析所有行为。此处最适合分析应用性能问题。</p>
</li>
<li><p>就像通过network标签找出时间耗费，通过sources标签找出有问题的代码一样，通过Timeline可以观察到更多详细细节。</p>
</li>
<li><p>使用点击timeline的圆形按钮，你可以记录（捕获）堆栈，js性能，内存和图形绘制(CSS)等信息。</p>
</li>
<li><p>chrome会以小粒度的详细日志来展现这些信息，可以通过很多种形式来查看。</p>
</li>
<li><p>所有这些信息可以帮助你很好地理解浏览器中发生的行为，尤其是发现内存占用比较多的事件。</p>
</li>
<li><p>在加载新页面之前记得先点击’clear’按钮再开始记录。</p>
</li>
<li><p>当记录JS事件时，点击title或左侧的’function call’，会重定向到resource标签，同时定位到函数所在位置的代码行。</p>
</li>
</ul>
<h2 id="Profiles-面板"><a href="#Profiles-面板" class="headerlink" title="Profiles 面板"></a>Profiles 面板</h2><ul>
<li><p>Profiles 面板可以提供web应用或页面的执行时间和内存，主要是针对运行于页面或app上的JavaScript。</p>
</li>
<li><p>这里可以收集到3种类型的概述信息: CPU profile，HEAP snapshot和HEAP profile。HEAP profiles更多的和内存使用信息相关，CPU profile和JavaScript性能相关。</p>
</li>
<li><p>V8分析器可以帮助定位JavaScript中的性能问题，有助于优化代码。</p>
</li>
<li><p>每一个profile都可以在左侧查看，可以对每个页面采集多个profile。总体而言，profiles标签页非常适合优化代码。</p>
</li>
</ul>
<h2 id="Resources-面板"><a href="#Resources-面板" class="headerlink" title="Resources 面板"></a>Resources 面板</h2><ul>
<li><p>Resources 面板可以显示已经加载的资源，包括：IndexedDB，Web SQL数据库，local storage，session storage，cookies，Application Cache, 图片, 字体和样式表。</p>
</li>
<li><p>可以在浏览器中查看和修改所有这些信息。</p>
</li>
<li><p>当你进行高级网站构建时，resources 面板可以帮你更好的理解app和页面的实时性要求。</p>
</li>
</ul>
<h2 id="Audit-工具"><a href="#Audit-工具" class="headerlink" title="Audit 工具"></a>Audit 工具</h2><ul>
<li><p>Audit 工具帮助你逐步改善你的页面。</p>
</li>
<li><p>Audit 工具会自动给你提供改进建议。</p>
</li>
</ul>
<h2 id="Console-面板"><a href="#Console-面板" class="headerlink" title="Console 面板"></a>Console 面板</h2><ul>
<li><p>Console 面板提供了2个主要功能：在开发过程中记录调试信息和提供一个可以用于和文档、开发工具交互的shell环境。</p>
</li>
<li><p>可以使用标准JS语法和特定控制台命令来查看原始数据和结构化数据。</p>
</li>
<li><p>从API中获取的JSON数据是典型的结构化数据。</p>
</li>
<li><p>信息经常会叠加满屏幕，你可以键入’clear()’来清空屏幕。通过勾选’Preserve Log’可以保存日志。</p>
</li>
<li><p>有几种不同的日志命令，比如console.log()用于基本日志记录，console.error()和colsole.warn()用于一些重要信息。</p>
</li>
<li><p>Console中可以追踪异常（代码出现了问题），甚至可以在出现异常时暂停代码的执行，如果你还记得，这个功能在Source标签页中也有。</p>
</li>
</ul>
<h1 id="复杂度学习"><a href="#复杂度学习" class="headerlink" title="复杂度学习"></a>复杂度学习</h1><ul>
<li><p>时间复杂度是讨论算法花费多少时间的一种方式。它对于更快的提高精简中的软件的运行速度有着很大的作用。</p>
</li>
<li><p>当你编写代码的时候，你应该要知道这个软件需要花多长时间去执行。没有人想要创造一个由于运行缓慢而让用户觉得沮丧的项目。</p>
</li>
<li><p>时间复杂度相对于一个算法来说，是一个或多个函数的集合。</p>
</li>
<li><p>大O符号专门帮助您识别是算法没有’规模’好，还是在有大量不同的用户，信息，或其他投入量工作下运行良好。</p>
</li>
<li><p>这不符合摩尔定律 - 不管你的电脑有多大有快捷，如果算法是成倍地低效率，它在现实就无法使用。</p>
</li>
<li><p>通过在算法中执行的基本操作（基本操作=一个花费固定时间执行的操作）的数目统计来测量时间复杂度。</p>
</li>
<li><p>时间复杂度由函数T(n)表示。O代表函数，(n)表示作用于元件的数目。</p>
</li>
<li><p>渐进时间复杂度，对于任何的有效输入它可能花费的最长时间，是表达时间复杂度最常见的方式。</p>
</li>
<li><p>当你讨论大0符号,通常指的是最坏的情况。</p>
</li>
<li><p>作为一个经验法则,任何用N ^ 2或其他指数对于多个用户的网站来说都不是好的算法。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">O(1)——确定一个数字是奇数或偶数。O(1)是一个静态的时间常量,不管有多少信息或有多少用户它都是一样的不改变。</div><div class="line"></div><div class="line">O(log N)——发现一个字在字典里(使用二分法检索)。二分法检索是一个典型的“分而治之”的算法。</div><div class="line"></div><div class="line">O(N)——看一本书</div><div class="line"></div><div class="line">O(N log N)——排序一副扑克牌(使用归并排序)</div><div class="line"></div><div class="line">O(N ^ 2)——在你购物车上检查你的购物清单的每一样东西</div><div class="line"></div><div class="line">O(∞)-掷硬币,直到它落在头上</div></pre></td></tr></table></figure>
<h1 id="计算机安全"><a href="#计算机安全" class="headerlink" title="计算机安全"></a>计算机安全</h1><h2 id="针对密码的字典攻击。"><a href="#针对密码的字典攻击。" class="headerlink" title="针对密码的字典攻击。"></a>针对密码的字典攻击。</h2><ul>
<li><p>当创建您的密码，有些网站需要极其特殊和复杂的密码，这实际上是一个也不必要的。</p>
</li>
<li><p>他们想要保护你不受字典攻击的攻击。</p>
</li>
<li><p>字典攻击就是尝试字典里的每一个字词，或者是它自己数据库中的常见词汇和很多人使用过的密码</p>
</li>
<li><p>大多数密码都没有这个简单的，但是，这并不重要。</p>
</li>
<li><p>他们只需要简单的密码就可以攻击巨量的账户。</p>
</li>
<li><p>在创建密码时，你想要使用不同的类型，数字和符号，但是最有效的方法之一是出现一些随机的字母。</p>
</li>
</ul>
<h2 id="网络钓鱼"><a href="#网络钓鱼" class="headerlink" title="网络钓鱼"></a>网络钓鱼</h2><ul>
<li><p>网络钓鱼，是模仿其他正规站点的网页或者邮件，试图欺骗用户输入自己的个人信息，而它却没有连接到它所模仿的站点。</p>
</li>
<li><p>一般情况下，两种方式来保护免受这些攻击：在地址栏中查看网址，打开一个新的浏览器并转到它所声称的网站。</p>
</li>
<li><p>我们还要学习加密和HTTPS。</p>
</li>
<li><p>如果你是在星巴克试图访问您的银行帐户，您有理由怀疑有人能看到，并采集您的信息。</p>
</li>
<li><p>你会想在网址的开头寻找一个绿色的HTTPS而不是HTTP。</p>
</li>
<li><p>这意味着，你向该网站所发送的密码和其他信息都被加密，只有他们可以根据一串码解开的数据。</p>
</li>
<li><p>一般情况下，只要你显示的是私人或敏感信息，检查一下HTTPS。</p>
</li>
<li><p>其他一些提示：重要账户之间不要使用相同的代码。</p>
</li>
<li><p>如果您使用的网站被黑客侵入，密码再长也没用。</p>
</li>
<li><p>同样，不要下载奇怪的文件。</p>
</li>
<li><p>如果你下载的文件不是像.PDF，txt文件，JPG格式这样常见的文件类型，就要小心了。</p>
</li>
<li><p>你下载的一些文件非常厉害，它们甚至可以在后台运行。</p>
</li>
<li><p>最后，让你的软件更新，特别是联网的软件。</p>
</li>
<li><p>信息泄露的一种方式就是’坏人’发现了旧版本的漏洞并突破了安全系统。</p>
</li>
<li><p>这些漏洞在新版本中已经修复，如果你每个软件都保持更新，你可以避免很多问题。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;FreeCodeCamp学习笔记（三）&quot;&gt;&lt;a href=&quot;#FreeCodeCamp学习笔记（三）&quot; class=&quot;headerlink&quot; title=&quot;FreeCodeCamp学习笔记（三）&quot;&gt;&lt;/a&gt;FreeCodeCamp学习笔记（三）&lt;/h1&gt;&lt;h1 id=&quot;chrome调试学习&quot;&gt;&lt;a href=&quot;#chrome调试学习&quot; class=&quot;headerlink&quot; title=&quot;chrome调试学习&quot;&gt;&lt;/a&gt;chrome调试学习&lt;/h1&gt;&lt;h2 id=&quot;elements标签&quot;&gt;&lt;a href=&quot;#elements标签&quot; class=&quot;headerlink&quot; title=&quot;elements标签&quot;&gt;&lt;/a&gt;elements标签&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在chrome浏览器中右击选中&lt;code&gt;Inspect element&lt;/code&gt;即可访问elements标签，然后你就可以随便修改元素文本，元素标签和任何其他CSS或者HTML。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://xuyanbo03.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="html" scheme="http://xuyanbo03.github.io/tags/html/"/>
    
      <category term="css" scheme="http://xuyanbo03.github.io/tags/css/"/>
    
      <category term="jquery" scheme="http://xuyanbo03.github.io/tags/jquery/"/>
    
      <category term="FreeCodeCamp" scheme="http://xuyanbo03.github.io/tags/FreeCodeCamp/"/>
    
      <category term="Chrome" scheme="http://xuyanbo03.github.io/tags/Chrome/"/>
    
  </entry>
  
  <entry>
    <title>FreeCodeCamp学习笔记（二）</title>
    <link href="http://xuyanbo03.github.io/FreeCodeCamplearn2.html"/>
    <id>http://xuyanbo03.github.io/FreeCodeCamplearn2.html</id>
    <published>2017-05-13T16:00:00.000Z</published>
    <updated>2020-02-16T10:34:46.673Z</updated>
    
    <content type="html"><![CDATA[<h1 id="FreeCodeCamp学习笔记（二）"><a href="#FreeCodeCamp学习笔记（二）" class="headerlink" title="FreeCodeCamp学习笔记（二）"></a>FreeCodeCamp学习笔记（二）</h1><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="软件概念"><a href="#软件概念" class="headerlink" title="软件概念"></a>软件概念</h2><ul>
<li><p>软件是程序或在硬件上运行的程序，写入硬件的代码，两种软件类型是操作系统和应用软件。</p>
</li>
<li><p>有三个主要的操作系统：Windows，Mac和Linux。</p>
</li>
<li><p>应用范围包括所有其他软件，如Web浏览器，游戏，还有像Photoshop，查看邮件，编辑文档的软件等。</p>
</li>
</ul>
<a id="more"></a>
<h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><ul>
<li><p>内容传递网络(CDN)是一种分布式服务器（网络），基于用户的地理位置向用户分发网页和其他Web内容，网页和内容分发服务器的起源。</p>
</li>
<li><p>CDN的目标是建立更高质量的网络连接。</p>
</li>
<li><p>CDNs通过为用户和用户目标站点之间建立快速通道或提供更快的建立在其他服务器上的镜像站点来达成目标。</p>
</li>
<li><p>这个概念和这种类型的服务不是创新型的想法，但是它正使互联网更加普及。</p>
</li>
<li><p>网站付费使用CDN服务，而CDN反过来you向因特网提供商付费来使用他们的服务和数据。</p>
</li>
<li><p>谷歌托管库就是一种CDNs – developers.google.com/speed/libraries/#jquery</p>
</li>
<li><p>谷歌托管那些(常用的)库，比起你自己(在自己的服务器上)部署这些库，你的用户就可以更快的访问到它。</p>
</li>
<li><p>有可能的话，用户浏览器甚至会存储已经访问过的网站的缓存。</p>
</li>
</ul>
<h2 id="模拟与数字转换和压缩"><a href="#模拟与数字转换和压缩" class="headerlink" title="模拟与数字转换和压缩"></a>模拟与数字转换和压缩</h2><ul>
<li><p>一个模拟声波可能看起来像任何东西，例子中它是一条波浪线。</p>
</li>
<li><p>计算机采集和测量很多很多不同的点。把他们转化为数字，这就是所谓的采样。之后，计算机可以使用这些数字，并再次把它们变成声音。</p>
</li>
<li><p>压缩的好处是，它是一个更小的文件：它更容易储存，它更容易发送给其他人，它只是占用更少的空间。</p>
</li>
<li><p>压缩声音的一种常用方法是以更低的频率采样。</p>
</li>
<li><p>另一种方式是，它从一个中点而不是0开始采样，所以所采集的数字更小。</p>
</li>
<li><p>在图像中，它是通过测量一组16个的像素来压缩，而不是独立的。</p>
</li>
<li><p>视频中减掉的部分是你想使用一个高质量的数字文件，但当你在压缩时，你需要决定压缩到何种程度以确保用户仍然有最好的体验。</p>
</li>
</ul>
<h2 id="联网"><a href="#联网" class="headerlink" title="联网"></a>联网</h2><ul>
<li>路由器是连接不同的小范围网络的东西。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">我想打个比方：我是一名教师，我在一所学校工作。</div><div class="line"></div><div class="line">假如说我有一个包，并且我需要把它送给我在民政事务处工作的人。</div><div class="line"></div><div class="line">我不知道她在哪里，我不知道她的办公室所在地，但我知道她的名字。</div><div class="line"></div><div class="line">我找我的秘书，像我的第一台路由器，我说&quot;嘿，我需要找在民政事务处的某某，你能帮帮我吗？&quot;，她会说：&quot;当然，我不知道她的办公室准确位置，但我知道，下一步，我可以找到她所在的区域。&quot;</div><div class="line"></div><div class="line">于是，她继续并将其它发送至到民政事务处的秘书，下一个路由器。</div><div class="line"></div><div class="line">那秘书不知道我是谁或者我在哪里，但她看到包装上的名称，知道结束位置。</div><div class="line"></div><div class="line">我想要去表达的是每个路由器只需要知道自己的小网，就在它旁边的站点。</div><div class="line"></div><div class="line">它不必知道整个互联网，但只是它自己的连接。</div><div class="line"></div><div class="line">它可以获取信息并说，好吧，我不知道确切位置这回事，但我会在正确的方向传递下去吧。</div><div class="line"></div><div class="line">这就是它所需要做的事。</div></pre></td></tr></table></figure>
<ul>
<li><p>路由器可以是不同的尺寸，不同容量，但他们做的是知道自己的邻居，获得信息，并传递向正确的方向。</p>
</li>
<li><p>路由器甚至不必须有完整的包的信息。</p>
</li>
<li><p>如果一台电脑正试图将信息发送到另一个时，数据可能会在不同的路由器之间分开，但是这没问题。计算机仍然知道如何正确地把信息重新组合到一起。</p>
</li>
<li><p>所发送信息的小碎片被称为数据包。包实际上是一小段二进制代码。</p>
</li>
<li><p>这是一个数据包的样子的示例，一段电流的视觉表示，计算机可以把它转化为1和0的，这就是我们所知道的二进制，可以代表任何数字数据。</p>
</li>
<li><p>这些小数据包通过路由器发送，并且如果一个文件是用一个信息包(发送)太大，它可以被分成帧（较小的小数据包）。帧发送到目的地不必采用相同的路由。</p>
</li>
<li><p>他们可以决定哪个路由是开放的，取其速度最快，而且因为它们具有IP地址，所有的路由器知道从哪里发送。一旦他们到达终点目的地，计算机知道如何把所有的信息重新拼合到一起。</p>
</li>
</ul>
<h2 id="源代码，解释器和编译器"><a href="#源代码，解释器和编译器" class="headerlink" title="源代码，解释器和编译器"></a>源代码，解释器和编译器</h2><ul>
<li><p>源代码本身是程序员创建的文本文档：他们键入它，它的字母，数字和符号。</p>
</li>
<li><p>如果你把这个给别人，让他们看看在他们的电脑查看这个文档，这没法帮助他们查看电子邮件，它不是一个浏览器，它只是一个文本文档。</p>
</li>
<li><p>计算机必须有一种解释它的东西，并使一些有用的东西可以运行于它。</p>
</li>
<li><p>有两种主要的方法是这样做：无论是由一个解释器或编译器。</p>
</li>
<li><p>每个浏览器都有一个解释器，这就是JavaScript如何被处理的。</p>
</li>
<li><p>其他的语言，像C++，使用编译器。</p>
</li>
<li><p>与解释器不同的是，编译器将其所有的工作都放在了程序员的端上。</p>
</li>
<li><p>他们发送他们的包，他们的产品，它已经被编译，它已经可以在一台机器上运行。</p>
</li>
<li><p>然而，JavaScript，和其他的解释型语言，您只需编写JavaScript，用户端的浏览器有能力解释它所以你不需要编译它。</p>
</li>
</ul>
<h1 id="硬件基础知识"><a href="#硬件基础知识" class="headerlink" title="硬件基础知识"></a>硬件基础知识</h1><h2 id="硬件组成"><a href="#硬件组成" class="headerlink" title="硬件组成"></a>硬件组成</h2><p><strong>计算机由4个基本部分组成：输入、输出、CPU（中央处理器）、存储器。</strong></p>
<ul>
<li><p>输入是你放入计算机的东西。</p>
</li>
<li><p>输出是你在显示屏上所看见的或在扬声器里所听见的。</p>
</li>
<li><p>CPU代表中央处理单元，并且当我们提到计算机时都能想起它。CPU是实现功能，运行软件的部分，由CPU来操作数据。</p>
</li>
<li><p>存储器是我们存储数据和信息的地方。CPU对存储器具有独占访问权。你无法通过输入和输出来访问内存而不使用CPU。</p>
<ul>
<li><p>现在存储器可以分为短期存储器, 称作RAM, 或者是长期存储器.</p>
</li>
<li><p>长期存储器通常是硬盘, 但是也可以是使CD-ROM或者是闪存设备, 或是任何这一类的。</p>
</li>
</ul>
</li>
</ul>
<p><strong>除了这四个基本部分, 我们今天还有另外三样东西要谈论: 主板，扩展槽和电源。</strong></p>
<ul>
<li><p>主板是连接这些硬件的东西。当这些数据到处流动试图找出该去哪时, 主板帮助他们导流他们，使他们去向正确的地方</p>
</li>
<li><p>扩展卡是声卡，显卡，这类可以提升用户体验的东西。</p>
</li>
<li><p>电源, 就像他的名字一样, 给我们的计算机提供电力。它通常是一个部件并有一个风扇在上面来帮助它散热。</p>
<ul>
<li><p>一个芯片全是由成千上万的晶体管(一种只能是0或1的开关)组成的</p>
</li>
<li><p>所有的这些晶体管塞进了一个芯片里，并且这就是芯片存储信息的方式。</p>
</li>
<li><p>在一个芯片上集成的晶体管数量决定了芯片的大小和速度</p>
</li>
<li><p>摩尔定律是观察到自从1965年芯片上的晶体管数量每两年增加一倍的一种规律。</p>
</li>
<li><p>二进制码是一种非常常见的计算机语言，它只能是1或0，也是on(开)或关，1代表on(开)，0代表off(关)。</p>
</li>
</ul>
</li>
</ul>
<h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><p><strong>数据大小</strong></p>
<ul>
<li><p>最小的单位我们称之为1比特(bit)。比特(bit)只能是0或1, 也就是回到我们一直在学习的二进制。</p>
</li>
<li><p>字节, 很常见, 8比特(bit)。很多东西都可以用二个字节来表示。</p>
</li>
<li><p>下一步是KB, 1024个字节, 或者8192个比特(bit).</p>
</li>
<li><p>之后是MB, 1024个字节的2次方。</p>
</li>
<li><p>之后就是GB了, 1024个字节的3次方； TB, 1024个字节的4次方, 和PB, 1024个字节的5次方。</p>
</li>
</ul>
<p><strong>数据的速率</strong></p>
<ul>
<li><p>数据速率不同于数据大小, 通常是计算每秒多少比特, 而大小是计算有多少比特。</p>
</li>
<li><p>一旦我们涉及到指数级，数据速率的表示就有了很大的不同</p>
</li>
<li><p>怎么讨论数据速率取决于我们在讨论的东西。</p>
<ul>
<li><p>在音频下载中，我们使用KB/s</p>
</li>
<li><p>网速，我们使用MB/s。如果你看到你的网速有多少多少比特每秒，记住它永远比按你提到数据大小时的字节小8倍。</p>
</li>
<li><p>网络中, 我们用GB/s (十亿比特每秒!)。</p>
</li>
</ul>
</li>
<li><p>这里主要选取方式是速度是按比特来计算而大小是按字节来计算。</p>
</li>
</ul>
<h2 id="超级计算机"><a href="#超级计算机" class="headerlink" title="超级计算机"></a>超级计算机</h2><ul>
<li>一种使用一种叫做并行处理的技术同理用很多CPU处理同一问题的计算机。</li>
</ul>
<h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><ul>
<li>服务器拥有并访问大量的数据或程序。</li>
</ul>
<h2 id="工作站"><a href="#工作站" class="headerlink" title="工作站"></a>工作站</h2><ul>
<li>一种和个人电脑非常相似的计算机, 但是更耗能且贵的多。</li>
</ul>
<h2 id="微控制器"><a href="#微控制器" class="headerlink" title="微控制器"></a>微控制器</h2><ul>
<li><p>一种可能你汽车里都有的计算机，它非常擅长处理小型的特定的任务但是不可以像个人计算机那样操作和使用。</p>
</li>
<li><p>主板的构成是处理器和内存之间的桥梁-如果它不这样做，它就不是一个主板。但是大多数主板要比这个功能多的多。主要是它们有扩展槽和接口。</p>
<ul>
<li><p>扩展槽使你可以任意插入提高计算机性能的东西，而不需要让中央处理器负担更多。</p>
</li>
<li><p>举个例子，显卡和声卡可以提供更好的声音和更出色的显示效果从而显著提升用户体验，却不会拖慢电脑。</p>
</li>
<li><p>网卡也可以插进扩展槽。</p>
</li>
<li><p>PC和扩展卡在笔记本上很常见，并且扩展卡因为他们尺寸很小被合并到了主板上。</p>
</li>
<li><p>在电脑上，你会知道有一个地方链接USB，电源接口，SD卡，以太网，甚至是一个音频插孔来通过耳机听声音。它们都是接口，主板上一个可以连接外源到CPU来获取或者给予信息的地方。</p>
</li>
</ul>
</li>
</ul>
<h2 id="数据网络"><a href="#数据网络" class="headerlink" title="数据网络"></a>数据网络</h2><p><strong>三种类型：局域网(LAN)，广域网(WAN)，虚拟专用网(VPN)。</strong></p>
<ul>
<li><p>局域网就像是一小组计算机连接在了一起。局域网最重要的是这些计算机离得很近。</p>
</li>
<li><p>广域网是两个，三个或者更多的局域网长距离的连接起来。</p>
<ul>
<li><p>你也许认为他们通过因特网(Internet)相连接，对于VPN来说(虚拟专用网，设计上和广域网相似)，你是对的。</p>
</li>
<li><p>一个广域网通常租用来自因特网公司的电缆来创建连接。</p>
</li>
</ul>
</li>
<li><p>因特网(Internet)的第一部分：因特网是如何工作的。</p>
<ul>
<li><p>IP地址：你可能已经习惯了每个设备都有它自己的IP地址，就像一个房子有它自己的地址一样。</p>
</li>
<li><p>如果一个设备没有IP地址因特网不能向它分发数据。</p>
</li>
<li><p>不止设备有，猫(modem)和路由器(router)也有，数据传输路上的每一步都有。</p>
</li>
<li><p>IP地址由位置所决定，起始于5个大型国际地区。</p>
</li>
<li><p>从左到右，数字意味着你的位置。</p>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;FreeCodeCamp学习笔记（二）&quot;&gt;&lt;a href=&quot;#FreeCodeCamp学习笔记（二）&quot; class=&quot;headerlink&quot; title=&quot;FreeCodeCamp学习笔记（二）&quot;&gt;&lt;/a&gt;FreeCodeCamp学习笔记（二）&lt;/h1&gt;&lt;h1 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h1&gt;&lt;h2 id=&quot;软件概念&quot;&gt;&lt;a href=&quot;#软件概念&quot; class=&quot;headerlink&quot; title=&quot;软件概念&quot;&gt;&lt;/a&gt;软件概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;软件是程序或在硬件上运行的程序，写入硬件的代码，两种软件类型是操作系统和应用软件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有三个主要的操作系统：Windows，Mac和Linux。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;应用范围包括所有其他软件，如Web浏览器，游戏，还有像Photoshop，查看邮件，编辑文档的软件等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://xuyanbo03.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="html" scheme="http://xuyanbo03.github.io/tags/html/"/>
    
      <category term="css" scheme="http://xuyanbo03.github.io/tags/css/"/>
    
      <category term="jquery" scheme="http://xuyanbo03.github.io/tags/jquery/"/>
    
      <category term="FreeCodeCamp" scheme="http://xuyanbo03.github.io/tags/FreeCodeCamp/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法JavaScript学习（一）</title>
    <link href="http://xuyanbo03.github.io/AlgorithmsJavaScriptlearn.html"/>
    <id>http://xuyanbo03.github.io/AlgorithmsJavaScriptlearn.html</id>
    <published>2017-05-09T16:00:00.000Z</published>
    <updated>2020-02-16T10:34:46.673Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构与算法JavaScript学习（一）"><a href="#数据结构与算法JavaScript学习（一）" class="headerlink" title="数据结构与算法JavaScript学习（一）"></a>数据结构与算法JavaScript学习（一）</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="常用数组方法"><a href="#常用数组方法" class="headerlink" title="常用数组方法"></a>常用数组方法</h3><ul>
<li><p>push方法，能把元素添加到数组的末尾</p>
</li>
<li><p>unshift方法，可直接把数值插入到数组首位</p>
</li>
<li><p>pop方法，删除数组里靠后的元素</p>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>shift方法，删除数组的第一个元素</p>
</li>
<li><p>splice方法，通过指定位置/索引，删除或增加相应位置和数量的元素</p>
<p><code>number.splice(5,3)</code>删除从数组索引5开始3个元素</p>
<p><code>number.splice(5,0,2,3,4)</code>从数组索引5开始增加3个元素2,3,4</p>
</li>
</ul>
<h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><ul>
<li>concat方法，合并数组，可迭代数组，把每个元素加入到最终数组</li>
</ul>
<h3 id="迭代器函数"><a href="#迭代器函数" class="headerlink" title="迭代器函数"></a>迭代器函数</h3><ul>
<li><p>every方法，迭代数组中的每个元素，直到返回false</p>
</li>
<li><p>some方法，迭代数组中的每个元素，直到返回true</p>
</li>
<li><p>forEach方法，迭代整个数组</p>
</li>
<li><p>map方法，遍历数组，得到新数组</p>
</li>
<li><p>filter方法，遍历数组，返回新数组，返回的数组由使函数返回true的元素组成</p>
</li>
<li><p>reduce方法，接受一个函数作为参数，函数有四个参数：previousValue, currentValue, index, array.函数返回一个将被叠加到累加器的值，方法停止执行返回累加器</p>
</li>
</ul>
<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><ul>
<li><p>reverse方法，将数组元素反序输出</p>
</li>
<li><p>sort方法，排序，把元素默认成字符串进行相互比较</p>
</li>
</ul>
<h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><ul>
<li><p>indexOf方法，返回与参数匹配的第一个元素的索引</p>
</li>
<li><p>lastIndexOf方法，返回与参数匹配的最后一个元素的索引</p>
</li>
</ul>
<h3 id="输出字符串"><a href="#输出字符串" class="headerlink" title="输出字符串"></a>输出字符串</h3><ul>
<li><p>toString方法，把数组里所有元素输出为一个字符串</p>
</li>
<li><p>join方法，用不同分隔符把元素隔开</p>
</li>
</ul>
<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ul>
<li><p>push(element(s)),添加一个或几个新元素到栈顶</p>
</li>
<li><p>pop(),移除栈顶的元素，同时返回被移除的元素</p>
</li>
<li><p>peek(),返回栈顶的元素，不对栈做修改</p>
</li>
<li><p>isEmpty(),看栈是否为空，空返回true，否则返回false</p>
</li>
<li><p>clear(),移除栈里的所有元素</p>
</li>
<li><p>size(),返回栈里元素的个数</p>
</li>
</ul>
<h3 id="完整实例"><a href="#完整实例" class="headerlink" title="完整实例"></a>完整实例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Stack</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> items = [];</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.push = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</div><div class="line">        items.push(element);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> items.pop();</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.peek = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> items[items.length<span class="number">-1</span>];</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> items.length == <span class="number">0</span>;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> items.length;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        items = [];</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(items.toString());</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> items.toString();</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ES6语法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">constructor</span> () &#123;</div><div class="line">        <span class="keyword">this</span>.items = [];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    push(element)&#123;</div><div class="line">        <span class="keyword">this</span>.items.push(element);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    pop()&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.items.pop();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    peek()&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.items.length<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    isEmpty()&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.items.length == <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    size()&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.items.length;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    clear()&#123;</div><div class="line">        <span class="keyword">this</span>.items = [];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    print()&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.toString());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    toString()&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.items.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><ul>
<li><p>enqueue(element(s)),向队列尾部添加一个或多个新的项</p>
</li>
<li><p>dequeue(),移除队列的第一项，并返回移除的元素</p>
</li>
<li><p>front(),返回队列第一个元素，不做任何修改</p>
</li>
<li><p>isEmpty(),判断是否为空，空返回true，否则返回false</p>
</li>
<li><p>size(),返回队列包含的元素个数</p>
</li>
</ul>
<h3 id="完整实例-1"><a href="#完整实例-1" class="headerlink" title="完整实例"></a>完整实例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> items = [];</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.enqueue = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</div><div class="line">        items.push(element);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.dequeue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> items.shift();</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.front = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> items[<span class="number">0</span>];</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> items.length == <span class="number">0</span>;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        items = [];</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> items.length;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(items.toString());</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ES6语法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">constructor</span> () &#123;</div><div class="line">        <span class="keyword">this</span>.items = [];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    enqueue(element)&#123;</div><div class="line">        <span class="keyword">this</span>.items.push(element);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    dequeue()&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.items.shift();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    front()&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.items[<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    isEmpty()&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.items.length == <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    size()&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.items.length;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    clear()&#123;</div><div class="line">        <span class="keyword">this</span>.items = [];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    print()&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.toString());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    toString()&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.items.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数据结构与算法JavaScript学习（一）&quot;&gt;&lt;a href=&quot;#数据结构与算法JavaScript学习（一）&quot; class=&quot;headerlink&quot; title=&quot;数据结构与算法JavaScript学习（一）&quot;&gt;&lt;/a&gt;数据结构与算法JavaScript学习（一）&lt;/h1&gt;&lt;h2 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h2&gt;&lt;h3 id=&quot;常用数组方法&quot;&gt;&lt;a href=&quot;#常用数组方法&quot; class=&quot;headerlink&quot; title=&quot;常用数组方法&quot;&gt;&lt;/a&gt;常用数组方法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;push方法，能把元素添加到数组的末尾&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;unshift方法，可直接把数值插入到数组首位&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pop方法，删除数组里靠后的元素&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://xuyanbo03.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="html" scheme="http://xuyanbo03.github.io/tags/html/"/>
    
      <category term="css" scheme="http://xuyanbo03.github.io/tags/css/"/>
    
      <category term="javascript" scheme="http://xuyanbo03.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>使用JavaScript做一个AI五子棋（上）</title>
    <link href="http://xuyanbo03.github.io/JavaScriptAIchess1.html"/>
    <id>http://xuyanbo03.github.io/JavaScriptAIchess1.html</id>
    <published>2017-04-26T16:00:00.000Z</published>
    <updated>2020-02-16T10:34:46.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用JavaScript做一个AI五子棋（上）"><a href="#使用JavaScript做一个AI五子棋（上）" class="headerlink" title="使用JavaScript做一个AI五子棋（上）"></a>使用JavaScript做一个AI五子棋（上）</h1><p><strong>实现步骤：</strong></p>
<ol>
<li>HTML、css、js基础框架</li>
<li>canvas画图</li>
<li>js实现棋盘</li>
<li>js实现棋子</li>
<li>棋盘落子</li>
</ol>
<hr>
<a id="more"></a>
<h1 id="HTML、css、js基础框架"><a href="#HTML、css、js基础框架" class="headerlink" title="HTML、css、js基础框架"></a>HTML、css、js基础框架</h1><h1 id="canvas画图"><a href="#canvas画图" class="headerlink" title="canvas画图"></a>canvas画图</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;canvas id=&quot;chess&quot; width=&quot;450px&quot; height=&quot;450px&quot;&gt;&lt;/canvas&gt;</div><div class="line"></div><div class="line">canvas &#123;</div><div class="line">    display: block;</div><div class="line">    margin: 50px auto;</div><div class="line">    box-shadow: -2px -2px 2px #efefef, 5px 5px 5px #b9b9b9;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var chess = document.getElementById(&apos;chess&apos;);</div><div class="line">var context = chess.getContext(&apos;2d&apos;);</div></pre></td></tr></table></figure>
<h1 id="js实现棋盘"><a href="#js实现棋盘" class="headerlink" title="js实现棋盘"></a>js实现棋盘</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var drawChessBoard = function() &#123;</div><div class="line">    for (var i = 0; i &lt; 15; i++) &#123;</div><div class="line">        context.moveTo(15 + i * 30, 15);</div><div class="line">        context.lineTo(15 + i * 30, 435);</div><div class="line">        context.stroke();</div><div class="line">        context.moveTo(15, 15 + i * 30);</div><div class="line">        context.lineTo(435, 15 + i * 30);</div><div class="line">        context.stroke();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="js实现棋子"><a href="#js实现棋子" class="headerlink" title="js实现棋子"></a>js实现棋子</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">var oneStep = function(i, j, me) &#123;</div><div class="line">	//画圆</div><div class="line">    context.beginPath();</div><div class="line">    context.arc(15 + i * 30, 15 + j * 30, 13, 0, 2 * Math.PI);</div><div class="line">    context.closePath();</div><div class="line"></div><div class="line">    //渐变</div><div class="line">    var gradient = context.createRadialGradient(15 + i * 30 + 2, 15 + j * 30 - 2, 13, 15 + i * 30 + 2, 15 + j * 30 - 2, 0);</div><div class="line">    if (me) &#123;</div><div class="line">    	gradient.addColorStop(0, &quot;#0a0a0a&quot;);</div><div class="line">    	gradient.addColorStop(1, &quot;#636766&quot;);</div><div class="line">    &#125;else&#123;</div><div class="line">    	gradient.addColorStop(0, &quot;#d1d1d1&quot;);</div><div class="line">    	gradient.addColorStop(1, &quot;#f9f9f9&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    context.fillStyle = gradient;</div><div class="line">    context.fill();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="落子"><a href="#落子" class="headerlink" title="落子"></a>落子</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">chess.onclick = function(e) &#123;</div><div class="line">    var x = e.offsetX;</div><div class="line">    var y = e.offsetY;</div><div class="line"></div><div class="line">    //向下取整算出索引</div><div class="line">    var i = Math.floor(x / 30);</div><div class="line">    var j = Math.floor(y / 30);</div><div class="line">    if (chessBoard[i][j]==0) &#123;</div><div class="line">    	oneStep(i, j, me);</div><div class="line">    	if (me) &#123;</div><div class="line">    		chessBoard[i][j]==1;</div><div class="line">    	&#125;else&#123;</div><div class="line">    		chessBoard[i][j]==2;</div><div class="line">    	&#125;</div><div class="line"></div><div class="line">    	//me轮流取反</div><div class="line">    	me = !me;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//默认黑子</div><div class="line">var me = true;</div><div class="line"></div><div class="line">//存储棋盘落子情况</div><div class="line">var chessBoard=[];</div><div class="line">for (var i = 0; i &lt; 15; i++) &#123;</div><div class="line">	chessBoard[i]=[];</div><div class="line">	for (var j = 0; i &lt; 15; j++) &#123;</div><div class="line">		chessBoard[i][j]=0;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用JavaScript做一个AI五子棋（上）&quot;&gt;&lt;a href=&quot;#使用JavaScript做一个AI五子棋（上）&quot; class=&quot;headerlink&quot; title=&quot;使用JavaScript做一个AI五子棋（上）&quot;&gt;&lt;/a&gt;使用JavaScript做一个AI五子棋（上）&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;实现步骤：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;HTML、css、js基础框架&lt;/li&gt;
&lt;li&gt;canvas画图&lt;/li&gt;
&lt;li&gt;js实现棋盘&lt;/li&gt;
&lt;li&gt;js实现棋子&lt;/li&gt;
&lt;li&gt;棋盘落子&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://xuyanbo03.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="html" scheme="http://xuyanbo03.github.io/tags/html/"/>
    
      <category term="css" scheme="http://xuyanbo03.github.io/tags/css/"/>
    
      <category term="javascript，css3" scheme="http://xuyanbo03.github.io/tags/javascript%EF%BC%8Ccss3/"/>
    
  </entry>
  
  <entry>
    <title>HTML5存储初探</title>
    <link href="http://xuyanbo03.github.io/HTML5store.html"/>
    <id>http://xuyanbo03.github.io/HTML5store.html</id>
    <published>2017-04-25T16:00:00.000Z</published>
    <updated>2020-02-16T10:34:46.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML5存储初探"><a href="#HTML5存储初探" class="headerlink" title="HTML5存储初探"></a>HTML5存储初探</h1><p><strong>常见存储：</strong></p>
<ol>
<li>Cookies</li>
<li>localStorage  &amp;&amp;  sessionStorage</li>
<li>indexedDB</li>
<li>application cache</li>
</ol>
<p><strong>其它客户端存储：</strong></p>
<ol>
<li><p>userData</p>
<p>只有IE支持（IE5.0 … 9.0）</p>
</li>
<li><p>google Gears</p>
<ul>
<li>chrome (12.0后放弃支持)</li>
<li>引擎：64SQLite</li>
<li>需要用户授权</li>
</ul>
</li>
</ol>
<hr>
<a id="more"></a>
<h2 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h2><p>Cookies是一种能够让网站服务器把少量数据储存到客户端的硬盘或内存，或是从客户端的硬盘读取数据的一种技术。Cookies是当你浏览某网站时，由Web服务器置于你硬盘上的一个非常小的文本文件，它可以记录你的用户ID、密码、浏览过的网页、停留的时间等信息。</p>
<p>当你再次来到该网站时，网站通过读取Cookies，得知你的相关信息，就可以做出相应的动作，如在页面显示欢迎你的标语，或者让你不用输入ID、密码就直接登录等等</p>
<p>Cookies文件是在无声无息中伴随浏览器进入我们本地硬盘的，当我们浏览某个站点时，该站点很可能将记录我们隐私的cookies文件上传到本地硬盘。</p>
<p>H5存储解决了cookie的问题</p>
<ul>
<li>解决cookie总数和单个大小的限制(4k 4095B)</li>
<li>解决请求头常带存储信息的问题</li>
<li>解决关系型存储的问题</li>
<li>跨浏览器</li>
</ul>
<h2 id="本地存储-localStorage-amp-amp-sessionStorage"><a href="#本地存储-localStorage-amp-amp-sessionStorage" class="headerlink" title="本地存储( localStorage  &amp;&amp;  sessionStorage)"></a>本地存储( localStorage  &amp;&amp;  sessionStorage)</h2><blockquote>
<p>图片不经常更改，不过如果图片bash64比较大的话，会比较浪费资源）</p>
</blockquote>
<ul>
<li><p>常用属性和方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">localStorage.key(i)</div><div class="line">.length</div><div class="line">.getItem(&quot;&lt;key&gt;&quot;)</div><div class="line">.setItem(&quot;&lt;key&gt;&quot;,&quot;&lt;value&gt;&quot;)</div><div class="line">.removeItem(&quot;&lt;key&gt;&quot;)</div><div class="line">.clear()</div></pre></td></tr></table></figure>
</li>
<li><p>使用注意事项：</p>
<ul>
<li>使用前先判断浏览器是否支持(浏览器开启无痕模式后不能用, 有的可读但不可写,所以不能用 if(window.localStorage){}来做兼容处理 先set,然后再捕获异常)；</li>
<li>写数据时，要异常处理，避免抛出容量错误；</li>
<li>避免将敏感信息写入localStorage；</li>
<li>注意key的唯一性,会被覆盖</li>
</ul>
</li>
</ul>
<ul>
<li>使用场景：<ul>
<li>利用本地数据，减少网络传输；</li>
<li>弱网络环境下，高延迟，低带宽，尽量把数据本地化。</li>
</ul>
</li>
</ul>
<ul>
<li>H5本地存储的使用限制<ul>
<li>需要添加存储更新策略和过期控制</li>
<li>子域名之间不能共享存储数据</li>
<li>超出存储后如何存储(LRU,FIFO)  –&gt;  LRU (Least Recently Used) FIFO (先入先出)</li>
<li>server端如何取到数据（请求参数）</li>
</ul>
</li>
</ul>
<ul>
<li>localStorage优点：<ul>
<li>存储大小达5M</li>
<li>兼容性好，功能强大</li>
<li>应用范围广</li>
</ul>
</li>
</ul>
<h2 id="indexedDB"><a href="#indexedDB" class="headerlink" title="indexedDB"></a>indexedDB</h2><ul>
<li><p>定义</p>
<p>一种能在浏览器中持久存储结构化数据的数据库，并为web应用提供了丰富的查询能力。</p>
</li>
<li><p>浏览器支持</p>
<p>chromw11+，FF4+，IE10+，移动端支持弱</p>
</li>
<li><p>存储结构</p>
<p>按域名分配独立空间，一个域名下可创建多个数据库，一个DB可以创建多个对象储存空间（表），一个对象存储空间可以创建多个对象数据。</p>
<p><img src="./IndexedSQL.jpg" alt="Alt Text"></p>
</li>
<li><p>功能</p>
<ul>
<li>增 删 改</li>
<li>事务</li>
<li>游标  </li>
<li>索引</li>
</ul>
</li>
</ul>
<p><em>注：w3c已不在维护Web SQL.</em></p>
<h2 id="离线缓存（application-cache）"><a href="#离线缓存（application-cache）" class="headerlink" title="离线缓存（application cache）"></a>离线缓存（application cache）</h2><ul>
<li><p>离线缓存（application cache）:让web应用在离线情况下继续使用，通过manifest文件指明要缓存的资源。</p>
</li>
<li><p>检测是否在线：navigator.onLine</p>
</li>
<li><p>原理（如图）：读取离线缓存，同时检查manifest文件，有更新时更新文件和缓存。</p>
<p><img src="./H51.jpg" alt="Alt Text"></p>
</li>
<li><p>appcache使用和更新</p>
<ul>
<li>使用：创建manifest文件</li>
<li>修改资源文件，必须通过修改manifest文件来更新被缓存的文件列表。</li>
</ul>
<p><img src="./H52.jpg" alt="Alt Text"></p>
</li>
<li><p>优点</p>
<ul>
<li>完全离线；</li>
<li>资源被缓存，加载更快；</li>
<li>降低server负载。</li>
</ul>
</li>
</ul>
<ul>
<li>缺陷<ul>
<li>含有manifest属性的当前页一定会被缓存；</li>
<li>更新依赖manifest文件，更新后需要再次刷新；</li>
<li>更新是全局性的，无法单点更新；</li>
<li>对于链接的参数变化敏感，不同的参数视为不同的文件。</li>
<li>占用资源</li>
<li>更新内容会在下次生效</li>
</ul>
</li>
</ul>
<ul>
<li><p>浏览器支持：IE8-不支持。</p>
</li>
<li><p>适用场景</p>
<ul>
<li>单地址的页面（无参数）；</li>
<li>对实时性要求不高的业务；</li>
<li>离线webapp。</li>
</ul>
</li>
</ul>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li><p>H5存储优势：</p>
<ul>
<li>存储空间大</li>
<li>接口丰富</li>
<li>数据相对安全</li>
<li>关系型</li>
<li>省流量</li>
</ul>
</li>
<li><p>H5存储劣势：</p>
<ul>
<li>浏览器兼容；( localStorage 和 app cache 主流浏览器都兼容的不错 )</li>
<li>同源策略；( localStorage 不可以跨子域，manifest 所引用的文件必须在同一个域名下面 )</li>
<li>脚本控制；( 只能在浏览器端存放；服务器端想拿到数据，只能通过请求 )</li>
<li>更新策略; ( 不像cookie可以设置过期时间；比如localStorage永不过期，必须自己写一套更新机制 )</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTML5存储初探&quot;&gt;&lt;a href=&quot;#HTML5存储初探&quot; class=&quot;headerlink&quot; title=&quot;HTML5存储初探&quot;&gt;&lt;/a&gt;HTML5存储初探&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;常见存储：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Cookies&lt;/li&gt;
&lt;li&gt;localStorage  &amp;amp;&amp;amp;  sessionStorage&lt;/li&gt;
&lt;li&gt;indexedDB&lt;/li&gt;
&lt;li&gt;application cache&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;其它客户端存储：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;userData&lt;/p&gt;
&lt;p&gt;只有IE支持（IE5.0 … 9.0）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;google Gears&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;chrome (12.0后放弃支持)&lt;/li&gt;
&lt;li&gt;引擎：64SQLite&lt;/li&gt;
&lt;li&gt;需要用户授权&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://xuyanbo03.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="html5" scheme="http://xuyanbo03.github.io/tags/html5/"/>
    
  </entry>
  
  <entry>
    <title>FreeCodeCamp学习笔记(一)</title>
    <link href="http://xuyanbo03.github.io/FreeCodeCamplearn1.html"/>
    <id>http://xuyanbo03.github.io/FreeCodeCamplearn1.html</id>
    <published>2017-04-23T16:00:00.000Z</published>
    <updated>2020-02-16T10:34:46.673Z</updated>
    
    <content type="html"><![CDATA[<h1 id="FreeCodeCamp学习笔记-一"><a href="#FreeCodeCamp学习笔记-一" class="headerlink" title="FreeCodeCamp学习笔记(一)"></a>FreeCodeCamp学习笔记(一)</h1><h1 id="html学习"><a href="#html学习" class="headerlink" title="html学习"></a>html学习</h1><h2 id="知识点补充"><a href="#知识点补充" class="headerlink" title="知识点补充"></a>知识点补充</h2><ul>
<li><p>a标签用#做占位符</p>
</li>
<li><p>img标签里应加alt属性，为了盲人朋友</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"smaller-image thick-green-border"</span> <span class="attr">alt</span>=<span class="string">"A cute orange cat lying on its back"</span> <span class="attr">src</span>=<span class="string">"/images/relaxing-cat.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>input标签加placeholder做占位符提示，在需要设置必填项的时候加required属性</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"cat photo URL"</span> <span class="attr">required</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>单选和复选按钮应加入到label标签里，name属性名应一致，checked为默认选中</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"indoor-outdoor"</span> <span class="attr">checked</span>&gt;</span> Indoor<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"indoor-outdoor"</span>&gt;</span> Outdoor<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"personality"</span> <span class="attr">checked</span>&gt;</span> Loving<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"personality"</span>&gt;</span> Lazy<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"personality"</span>&gt;</span> Energetic<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><p>有三个影响HTML元素布局的重要属性：padding(内边距)、margin(外边距)、border(边框)。</p>
<ul>
<li><p>元素的 padding 控制元素内容 content和元素边框 border 之间的距离。</p>
<p>当加大 padding, 将扩大元素内容和元素边框的距离。</p>
</li>
<li><p>元素的外边距 margin 控制元素边框 border 和元素实际所占空间的距离。</p>
<p>当增大 margin 时，将会增加元素边框和元素实际所占空间之间的距离。</p>
<p>如果你将一个元素的 margin 设置为负值，元素将会变大。</p>
</li>
</ul>
<h1 id="css学习"><a href="#css学习" class="headerlink" title="css学习"></a>css学习</h1><p>浏览器读取 CSS 的顺序是从上到下，这意味着，在发生冲突时，浏览器会使用最后的 CSS 声明。但是如果设置id， id 属性总是具有更高的优先级。</p>
<p>很多情况下，你会使用 CSS 库，这些库可能会意外覆盖掉你自己的 CSS。所以当你需要确保某元素具有指定的 CSS 时，你可以使用 !important.</p>
<h2 id="rgb颜色设置"><a href="#rgb颜色设置" class="headerlink" title="rgb颜色设置"></a>rgb颜色设置</h2><p>0 是 hex code（十六进制编码）中最小的一个，它代表颜色的完全缺失。</p>
<p>F 是 hex code（十六进制编码）中最大的一个，它代表最大可能的亮度。</p>
<p>16 个值和 6 个位置意味着我们有 16 的 6 次方，或者说超过 1600 万种可能的颜色.</p>
<p>Hex code 遵循 red-green-blue（红-绿-蓝），或者叫 rgb 格式。hex code 中的前两位表示颜色中红色的数量，第三四位代表绿色的数量，第五六位代表蓝色的数量。</p>
<h1 id="jquery学习"><a href="#jquery学习" class="headerlink" title="jquery学习"></a>jquery学习</h1><p><strong>jQuery通过选择器来选择一个元素的，然后操作元素做些改变。</strong></p>
<ol>
<li>要让所有的按钮做弹回效果，只要把这段代码写在<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<p>里面，然后<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"button"</span>).addClass(<span class="string">"animated bounce"</span>);</div></pre></td></tr></table></figure></p>
<ol>
<li><p>你可以通过jQuery的addClass()方法给元素添加class,也可以通过jQueryremoveClass()方法去掉元素上的class。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#target2"</span>).removeClass(<span class="string">"btn-default"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>jQuery有一个叫做.css()的方法能让你改变元素的CSS样式。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#target1"</span>).css(<span class="string">"color"</span>, <span class="string">"blue"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>jQuery有一个.prop()的方法让你来调整元素的属性</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"button"</span>).prop(<span class="string">"disabled"</span>, <span class="literal">true</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>jQuery的.html()方法可以添加HTML标签和文字到元素，而元素之前的内容都会被方法的内容所替换掉。</p>
<p>我们是通过em[emphasize]标签来重写和强调标题文本的：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"h3"</span>).html(<span class="string">"&lt;em&gt;jQuery Playground&lt;/em&gt;"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>jQuery 还有一个类似的方法叫.text()，它只能改变文本但不能修改标记。换句话说，这个方法只会把传进来的任何东西(包括标记)当成文本来显示。</p>
</li>
<li><p>jQuery有一个appendTo()方法可以把选中的元素加到其他元素中。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#target4"</span>).appendTo(<span class="string">"#left-well"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>jQuery的clone()方法可以拷贝元素。<br>方法链function chaining，使用起来很方便</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#target2"</span>).clone().appendTo(<span class="string">"#right-well"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>每个HTML元素根据继承属性都有父parent元素,jQuery有一个方法叫parent()，它允许你访问指定元素的父元素</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#left-well"</span>).parent().css(<span class="string">"background-color"</span>, <span class="string">"blue"</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>许多HTML元素都有children(子元素)，每个子元素都从父元素那里继承了一些属性jQuery有一个方法叫children()，它允许你访问指定元素的子元素。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#left-well"</span>).children().css(<span class="string">"color"</span>, <span class="string">"blue"</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>jQuery 用CSS选择器来选取元素，target:nth-child(n) CSS选择器允许你按照索引顺序(从1开始)选择目标元素的所有子元素。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">".target:nth-child(3)"</span>).addClass(<span class="string">"animated bounce"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>获取class为target且索引为奇数的所有元素，并给他们添加class。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">".target:odd"</span>).addClass(<span class="string">"animated shake"</span>);</div></pre></td></tr></table></figure>
</li>
</ol>
<p>jQuery里的索引是从0开始的，也就是说：:odd 选择第2、4、6个元素，因为target#2(索引为1)，target#4(索引为3)，target6(索引为5)。获取class为target且索引为偶数的所有元素，并给他们添加class。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">".target:even"</span>).addClass(<span class="string">"animated shake"</span>);</div></pre></td></tr></table></figure></p>
<ol>
<li><p>让整个body都有淡出效果(fadeOut)：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"body"</span>).addClass(<span class="string">"animated fadeOut"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>$(document).ready(),这个函数中的代码只会在我们的页面加载时候运行一次，确保执行js之前页面所有的dom已经准备就绪。</p>
</li>
<li><p>增加一个click事件,通过点击事件来更改文本。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#getMessage"</span>).on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  $(<span class="string">".message"</span>).html(<span class="string">"Here is the message"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;FreeCodeCamp学习笔记-一&quot;&gt;&lt;a href=&quot;#FreeCodeCamp学习笔记-一&quot; class=&quot;headerlink&quot; title=&quot;FreeCodeCamp学习笔记(一)&quot;&gt;&lt;/a&gt;FreeCodeCamp学习笔记(一)&lt;/h1&gt;&lt;h1 id=&quot;html学习&quot;&gt;&lt;a href=&quot;#html学习&quot; class=&quot;headerlink&quot; title=&quot;html学习&quot;&gt;&lt;/a&gt;html学习&lt;/h1&gt;&lt;h2 id=&quot;知识点补充&quot;&gt;&lt;a href=&quot;#知识点补充&quot; class=&quot;headerlink&quot; title=&quot;知识点补充&quot;&gt;&lt;/a&gt;知识点补充&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;a标签用#做占位符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;img标签里应加alt属性，为了盲人朋友&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;#&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;smaller-image thick-green-border&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;alt&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;A cute orange cat lying on its back&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;/images/relaxing-cat.jpg&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://xuyanbo03.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="html" scheme="http://xuyanbo03.github.io/tags/html/"/>
    
      <category term="css" scheme="http://xuyanbo03.github.io/tags/css/"/>
    
      <category term="jquery" scheme="http://xuyanbo03.github.io/tags/jquery/"/>
    
      <category term="FreeCodeCamp" scheme="http://xuyanbo03.github.io/tags/FreeCodeCamp/"/>
    
  </entry>
  
  <entry>
    <title>CSS3实现3D魔方</title>
    <link href="http://xuyanbo03.github.io/CSS3show3D.html"/>
    <id>http://xuyanbo03.github.io/CSS3show3D.html</id>
    <published>2017-04-21T16:00:00.000Z</published>
    <updated>2020-02-16T10:34:46.673Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS3实现3D魔方"><a href="#CSS3实现3D魔方" class="headerlink" title="CSS3实现3D魔方"></a>CSS3实现3D魔方</h1><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><ul>
<li><p>写出基础HTML框架</p>
</li>
<li><p>基本CSS样式，初始化</p>
</li>
<li><p>CSS实现魔方的各个面：外轮廓和内盒子</p>
</li>
<li><p>CSS3实现魔方表面的3D位置</p>
</li>
<li><p>CSS3实现旋转</p>
</li>
</ul>
<a id="more"></a>
<h2 id="第一步：HTML结构"><a href="#第一步：HTML结构" class="headerlink" title="第一步：HTML结构"></a>第一步：HTML结构</h2><p><strong>六个面类似如下结构</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>3D魔方<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"view"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"red-surfaces"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"one"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"two"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"three"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"four"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"five"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"six"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"seven"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"eight"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"nine"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="第二步：CSS初始化"><a href="#第二步：CSS初始化" class="headerlink" title="第二步：CSS初始化"></a>第二步：CSS初始化</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">* &#123;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0px</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">0px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">min-height</span>: <span class="number">600px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100%</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">body</span> <span class="selector-tag">h1</span> &#123;</div><div class="line">    <span class="attribute">margin-top</span>: <span class="number">50px</span>;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.view</span> &#123;</div><div class="line">    <span class="attribute">margin</span>: -<span class="number">60px</span> auto;</div><div class="line">    <span class="attribute">width</span>: <span class="number">800px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">800px</span>;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">20px</span>;</div><div class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">scale</span>(0.7);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="第三步：CSS实现魔方的各个面：外轮廓和内盒子"><a href="#第三步：CSS实现魔方的各个面：外轮廓和内盒子" class="headerlink" title="第三步：CSS实现魔方的各个面：外轮廓和内盒子"></a>第三步：CSS实现魔方的各个面：外轮廓和内盒子</h2><p>外轮廓样式</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.red-surfaces</span>,</div><div class="line"><span class="selector-class">.blue-surfaces</span>,</div><div class="line"><span class="selector-class">.green-surfaces</span>,</div><div class="line"><span class="selector-class">.white-surfaces</span>,</div><div class="line"><span class="selector-class">.orange-surfaces</span>,</div><div class="line"><span class="selector-class">.yellow-surfaces</span> &#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">330px</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">330px</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">235px</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">235px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>内盒子样式</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.red-surfaces</span>&gt;<span class="selector-tag">div</span>,</div><div class="line"><span class="selector-class">.blue-surfaces</span>&gt;<span class="selector-tag">div</span>,</div><div class="line"><span class="selector-class">.green-surfaces</span>&gt;<span class="selector-tag">div</span>,</div><div class="line"><span class="selector-class">.white-surfaces</span>&gt;<span class="selector-tag">div</span>,</div><div class="line"><span class="selector-class">.orange-surfaces</span>&gt;<span class="selector-tag">div</span>,</div><div class="line"><span class="selector-class">.yellow-surfaces</span>&gt;<span class="selector-tag">div</span> &#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">    <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="built_in">rgba</span>(170, 170, 170, 0.9);</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>内盒子颜色 : 六面</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.red-surfaces</span>&gt;<span class="selector-tag">div</span> &#123;</div><div class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(255, 0, 0, 0.8);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>内盒子定位 ：九个小块</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#one</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0px</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="第四步：CSS3实现魔方表面的3D位置"><a href="#第四步：CSS3实现魔方表面的3D位置" class="headerlink" title="第四步：CSS3实现魔方表面的3D位置"></a>第四步：CSS3实现魔方表面的3D位置</h2><p>六个表面不同角度设置</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.red-surfaces</span> &#123;</div><div class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateX</span>(-90deg) <span class="built_in">translateZ</span>(165px);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="第五步：CSS3实现旋转"><a href="#第五步：CSS3实现旋转" class="headerlink" title="第五步：CSS3实现旋转"></a>第五步：CSS3实现旋转</h2><p>keyframe定义 ：animation</p>
<ul>
<li>name规定需要绑定到选择器的keyframe名称</li>
<li>duration规定完成动画所花费的时间，以秒或毫秒计</li>
<li>timing-function规定动画的速度曲线</li>
<li>delay规定在动画开始之前的延迟</li>
<li>iteration-count规定动画应该播放的次数</li>
<li>direction规定是否应该轮流反向播放动画</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">  <span class="attribute">-webkit-animation</span>:BoxRotate <span class="number">3s</span> ease-in-out infinite;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>动画旋转基准 : transform-origin<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">  <span class="attribute">-webkit-transform-origin</span>: <span class="number">400px</span> <span class="number">400px</span> <span class="number">200px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3D实现：transform-style<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">  <span class="attribute">-webkit-transform-style</span>: preserve-<span class="number">3</span>d;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>keyframe定义旋转</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> BoxRotate &#123;</div><div class="line">    16% &#123;</div><div class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateY</span>(-90deg) <span class="built_in">rotateZ</span>(135deg);</div><div class="line">    &#125;</div><div class="line">    33% &#123;</div><div class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateY</span>(-90deg) <span class="built_in">rotateX</span>(135deg);</div><div class="line">    &#125;</div><div class="line">    50% &#123;</div><div class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateY</span>(225deg) <span class="built_in">rotateZ</span>(135deg);</div><div class="line">    &#125;</div><div class="line">    66% &#123;</div><div class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateY</span>(135deg) <span class="built_in">rotateX</span>(135deg);</div><div class="line">    &#125;</div><div class="line">    83% &#123;</div><div class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateX</span>(135deg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>CSS3也可以实现js实现的动画，而且还减少资源消耗，要熟练掌握新特性。</p>
<p>源码地址：<a href="https://github.com/xuyanbo03/Front-End/tree/master/3D-magic-cube" target="_blank" rel="external">github-xuyanbo03</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CSS3实现3D魔方&quot;&gt;&lt;a href=&quot;#CSS3实现3D魔方&quot; class=&quot;headerlink&quot; title=&quot;CSS3实现3D魔方&quot;&gt;&lt;/a&gt;CSS3实现3D魔方&lt;/h1&gt;&lt;h2 id=&quot;实现思路&quot;&gt;&lt;a href=&quot;#实现思路&quot; class=&quot;headerlink&quot; title=&quot;实现思路&quot;&gt;&lt;/a&gt;实现思路&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;写出基础HTML框架&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;基本CSS样式，初始化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CSS实现魔方的各个面：外轮廓和内盒子&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CSS3实现魔方表面的3D位置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CSS3实现旋转&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://xuyanbo03.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="html" scheme="http://xuyanbo03.github.io/tags/html/"/>
    
      <category term="css" scheme="http://xuyanbo03.github.io/tags/css/"/>
    
      <category term="javascript，css3" scheme="http://xuyanbo03.github.io/tags/javascript%EF%BC%8Ccss3/"/>
    
  </entry>
  
  <entry>
    <title>kali linux 安装指南</title>
    <link href="http://xuyanbo03.github.io/kali-linux-install.html"/>
    <id>http://xuyanbo03.github.io/kali-linux-install.html</id>
    <published>2017-04-19T16:00:00.000Z</published>
    <updated>2020-02-22T04:03:09.766Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kali-linux-安装指南"><a href="#kali-linux-安装指南" class="headerlink" title="kali linux 安装指南"></a>kali linux 安装指南</h1><blockquote>
<p>Kali Linux是基于Debian的Linux发行版， 设计用于数字取证和渗透测试。Kali Linux预装了许多渗透测试软件，包括nmap (端口扫描器)、Wireshark (数据包分析器)、John the Ripper (密码破解器),以及Aircrack-ng (一应用于对无线局域网进行渗透测试的软件).用户可通过硬盘、live CD或live USB运行Kali Linux。Metasploit的Metasploit Framework支持Kali Linux，Metasploit一套针对远程主机进行开发和执行Exploit代码的工具。<br>Kali Linux既有32位和64位的镜像。可用于x86 指令集。同时还有基于ARM架构的镜像，可用于树莓派和三星的ARM Chromebook. –[百度百科]</p>
</blockquote>
<a id="more"></a>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="https://www.kali.org/downloads/" target="_blank" rel="external">kali linux 官网</a></p>
<h3 id="U盘刻录"><a href="#U盘刻录" class="headerlink" title="U盘刻录"></a>U盘刻录</h3><p>镜像刻录U盘工具：Win32 Disk Imager</p>
<p>这个工具刻录的镜像比较完整，可直接用U盘启动，比软碟通要好。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li><p>刻录U盘后重启电脑，不需要用EasyBCD。</p>
</li>
<li><p>重启电脑后进入bios，选择U盘启动</p>
</li>
<li><p>进入镜像，选择Graphical install选项，当然选择install也是一样的</p>
</li>
<li><p>安装语言、地区、键盘</p>
</li>
<li><p>无法挂载光盘解决：拔下U盘再插上，选择是继续</p>
</li>
<li><p>网络设备固件缺失：直接选择否继续</p>
</li>
<li><p>设置主机名和密码：默认用户名：root 密码：toor</p>
</li>
<li><p>磁盘分区（最重要一部分），这一部分是很重要的一步，一定要注意看清，选对，再操作。</p>
<ul>
<li>选择手动</li>
<li>选择我们准备好要安装kali的那个分区</li>
<li><p>分配分区:</p>
<ul>
<li>/boot:启动分区</li>
<li>/ :根分区</li>
<li>/home:用户目录</li>
<li>/tmp:临时文件</li>
<li>/usr:文件系统</li>
<li>/var:可变数据目录</li>
<li>/opt:附加应用程序</li>
<li>swap:交换分区</li>
</ul>
<p>一般分/boot、/、/home、swap</p>
<p>分区方案关键点：</p>
<p>大数据库一般要加大/usr挂载点</p>
<p>多用户、下载类、多存储文件等要加大/home挂载点</p>
<p>文件小，用户多要注意/tmp和/var挂载点大小</p>
</li>
<li>选择“分区设定结束并将修改写入磁盘”继续</li>
</ul>
</li>
<li><p>开始格式化并写入磁盘，这个过程可能有点长，请耐心等待</p>
</li>
<li><p>网络镜像</p>
</li>
<li><p>写入引导（很重要一步）:一定选是，是个坑</p>
</li>
<li><p>安装完成</p>
</li>
</ul>
<h2 id="安装之后"><a href="#安装之后" class="headerlink" title="安装之后"></a>安装之后</h2><ul>
<li><p>更新软件源</p>
<p>修改sources.list文件：/etc/apt/sources.list</p>
<p>然后选择添加适合自己较快的源（可自由选择）</p>
<p>保存之后：</p>
<p>apt-get update      #刷新系统</p>
<p>apt-get dist-upgrade         #安装更新</p>
</li>
<li><p>kali-linux安装中文输入法</p>
<p>apt-get install fcitx-table-wbpy ttf-wqy-microhei ttf-wqy-zenhei         #拼音五笔</p>
</li>
<li><p>安装gnome管理软件</p>
<p>apt-get install gnome-tweak-tool</p>
</li>
<li><p>安装新立德</p>
<p>apt-get install synaptic</p>
</li>
<li><p>安装解压缩软件</p>
<p>apt-get install file-roller</p>
</li>
<li><p>安装smplayer视频播放器</p>
<p>apt-get install smplayer</p>
</li>
<li><p>安装多窗口终端</p>
<p>apt-get install terminator</p>
</li>
<li><p>安装VMware和VirtualBox</p>
</li>
</ul>
<h2 id="使用及相关系统"><a href="#使用及相关系统" class="headerlink" title="使用及相关系统"></a>使用及相关系统</h2><p>渗透测试笔记：使用渗透工具进行测试</p>
<p><a href="">BackBox</a>：黑客工具箱</p>
<p><a href="">Parrot Security os</a>：本人用的最炫的一个系统，安装也简便，工具很强大，但是系统内部文件跟常规系统不太一样，适合对linux熟悉的人员使用</p>
<p><a href="">Cyborg Hawk</a>：工具最多的一个系统，但是全英文，不支持中文，对英语水平要求很高。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;kali-linux-安装指南&quot;&gt;&lt;a href=&quot;#kali-linux-安装指南&quot; class=&quot;headerlink&quot; title=&quot;kali linux 安装指南&quot;&gt;&lt;/a&gt;kali linux 安装指南&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Kali Linux是基于Debian的Linux发行版， 设计用于数字取证和渗透测试。Kali Linux预装了许多渗透测试软件，包括nmap (端口扫描器)、Wireshark (数据包分析器)、John the Ripper (密码破解器),以及Aircrack-ng (一应用于对无线局域网进行渗透测试的软件).用户可通过硬盘、live CD或live USB运行Kali Linux。Metasploit的Metasploit Framework支持Kali Linux，Metasploit一套针对远程主机进行开发和执行Exploit代码的工具。&lt;br&gt;Kali Linux既有32位和64位的镜像。可用于x86 指令集。同时还有基于ARM架构的镜像，可用于树莓派和三星的ARM Chromebook. –[百度百科]&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://xuyanbo03.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://xuyanbo03.github.io/tags/Linux/"/>
    
      <category term="kali" scheme="http://xuyanbo03.github.io/tags/kali/"/>
    
  </entry>
  
  <entry>
    <title>MapReduce初探</title>
    <link href="http://xuyanbo03.github.io/mapreduce-note.html"/>
    <id>http://xuyanbo03.github.io/mapreduce-note.html</id>
    <published>2017-04-13T16:00:00.000Z</published>
    <updated>2020-02-22T03:12:29.020Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MapReduce初探"><a href="#MapReduce初探" class="headerlink" title="MapReduce初探"></a>MapReduce初探</h1><p><strong>MapReduce是一个用于处理海量数据的分布式计算框架</strong></p>
<p>MapReduce解决的问题：</p>
<ul>
<li>数据分布式存储</li>
<li>作业调度</li>
<li>容错</li>
<li>机器间通信</li>
</ul>
<a id="more"></a>
<p>MapReduce存储：HDFS</p>
<ul>
<li>系统可靠性</li>
<li>可扩展性</li>
<li>并发处理</li>
</ul>
<p><img src="images/mr-learn/HDFS.png" alt="Alt text"></p>
<p>MapReduce思想：分治</p>
<ul>
<li><p>分解</p>
</li>
<li><p>求解</p>
</li>
<li><p>合并</p>
</li>
<li><p>分：map</p>
<p>把复杂的问题分解为若干简单的任务</p>
</li>
<li><p>合：reduce</p>
</li>
</ul>
<h2 id="MapReduce执行流程"><a href="#MapReduce执行流程" class="headerlink" title="MapReduce执行流程"></a>MapReduce执行流程</h2><p><img src="images/mr-learn/MR1.png" alt="Alt text"></p>
<p><img src="images/mr-learn/MR2.png" alt="Alt text"></p>
<p><img src="images/mr-learn/MR3.png" alt="Alt text"></p>
<p><img src="images/mr-learn/MR4.png" alt="Alt text"></p>
<p><img src="images/mr-learn/MR5.png" alt="Alt text"></p>
<p><img src="images/mr-learn/MR6.png" alt="Alt text"></p>
<p><img src="images/mr-learn/MR7.png" alt="Alt text"></p>
<p><img src="images/mr-learn/MR8.png" alt="Alt text"></p>
<p><img src="images/mr-learn/MR9.png" alt="Alt text"></p>
<p><img src="images/mr-learn/MR10.png" alt="Alt text"></p>
<p><img src="images/mr-learn/MR11.png" alt="Alt text"></p>
<p><img src="images/mr-learn/MR12.png" alt="Alt text"></p>
<p><img src="images/mr-learn/MR13.png" alt="Alt text"></p>
<p><img src="images/mr-learn/MR14.png" alt="Alt text"></p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="WordCount"><a href="#WordCount" class="headerlink" title="WordCount"></a>WordCount</h3><p><img src="images/mr-learn/WordCount.png" alt="Alt text"></p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ul>
<li>数据统计<ul>
<li>A/B test的需要，实验和对照统计对比各个指标</li>
<li>统计广告每天的展示、点击和消费总量</li>
<li>统计视频在一段时间内展示和点击数量，CTR指标</li>
</ul>
</li>
</ul>
<ul>
<li>数据过滤<ul>
<li>从日志中找到某一个条件数据</li>
<li>除去非法数据，保留合法数据</li>
<li>数据格式整理</li>
</ul>
</li>
</ul>
<ul>
<li>同类汇聚<ul>
<li>多份日志中，相同时间点、用户行为日志混合</li>
<li>类表格文件存储中，相同主键拼接相关的属性</li>
<li>历史的主数据与新增、修改数据合并</li>
</ul>
</li>
</ul>
<ul>
<li>全局排序<ul>
<li>混合日志按时间排序</li>
<li>多个字段排序</li>
<li>数据按名称排序</li>
</ul>
</li>
</ul>
<ul>
<li>容错框架<ul>
<li>易出错的服务，大数值计算</li>
<li>计算规模经常变化调整的服务</li>
<li>单进程程序。迅速提升执行计算效率</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MapReduce初探&quot;&gt;&lt;a href=&quot;#MapReduce初探&quot; class=&quot;headerlink&quot; title=&quot;MapReduce初探&quot;&gt;&lt;/a&gt;MapReduce初探&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;MapReduce是一个用于处理海量数据的分布式计算框架&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;MapReduce解决的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据分布式存储&lt;/li&gt;
&lt;li&gt;作业调度&lt;/li&gt;
&lt;li&gt;容错&lt;/li&gt;
&lt;li&gt;机器间通信&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="大数据" scheme="http://xuyanbo03.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="MapReduce" scheme="http://xuyanbo03.github.io/tags/MapReduce/"/>
    
  </entry>
  
  <entry>
    <title>Google Hack</title>
    <link href="http://xuyanbo03.github.io/Googlehack.html"/>
    <id>http://xuyanbo03.github.io/Googlehack.html</id>
    <published>2017-03-23T16:00:00.000Z</published>
    <updated>2020-02-16T10:34:46.673Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Googlehack"><a href="#Googlehack" class="headerlink" title="Googlehack"></a>Googlehack</h1><blockquote>
<p>这些命令均为在Google搜索引擎中才能使用</p>
</blockquote>
<h2 id="中文引号“-”"><a href="#中文引号“-”" class="headerlink" title="中文引号“ ”"></a>中文引号“ ”</h2><p>在搜索关键字时，加上中文的“”号，你就能精确的只搜“”里面的文字了。</p>
<h2 id="在搜索词后面加上“site-网站名”："><a href="#在搜索词后面加上“site-网站名”：" class="headerlink" title="在搜索词后面加上“site:网站名”："></a>在搜索词后面加上“site:网站名”：</h2><p>举个例子吧，就如搜索 白帽 site:sina.com ，那么就能搜索在新浪（sina.com）这个域名下的，有关“白帽”的信息了。<br>搜索出的结果均为新浪网中，与白帽有关的网页</p>
<a id="more"></a>
<h2 id="“-”："><a href="#“-”：" class="headerlink" title="“-”："></a>“-”：</h2><p>就一个减号，在输入搜索词的后面，空格后加上一个减号。在减号后面输入你想过滤的东西，比如你想搜姚明，但又不想看他与篮球有关的东西，那么你只需要这样“姚明 -篮球”进行搜索就可以得出姚明与篮球无关的信息了。</p>
<h2 id="号："><a href="#号：" class="headerlink" title="* 号："></a>* 号：</h2><p>在搜索词前面加上该符号，就可以搜索出与<em>号后面相关的词语的内容，如你输入</em>伟，那么出来的结果都会是XX伟，而不会是伟XX的内容。</p>
<h2 id="filetype："><a href="#filetype：" class="headerlink" title="filetype："></a>filetype：</h2><p>爱在网上找资料的人都有很难找到想要的东西，要么名字对格式不对，要么格式对，内容不对。这里的filetype就可以准确的搜索出某个关键字下，你想要的文件名。如搜索（数学 filetype：pdf），就会出来与数学有关的所有pdf文件。</p>
<h2 id="info-url"><a href="#info-url" class="headerlink" title="info:url"></a>info:url</h2><p>在搜索栏中输入这个，就会出来被搜索网址的所有信息。</p>
<h2 id="intitle"><a href="#intitle" class="headerlink" title="intitle:"></a>intitle:</h2><p>在搜索词前输入这个命令，那么就会搜出网页中是以搜索词为标题的网页。</p>
<h2 id="inurl"><a href="#inurl" class="headerlink" title="inurl:"></a>inurl:</h2><p>输入网址后，是在搜索的结果中，把包含了URL的结果页面返回(也就是在结果中找有多少是你的网址的内容)，如：inurl:baidu.com site:www.sina.com,则会搜索出新浪网中所有包含了baidu.com 网址的网页。</p>
<h2 id="link-url"><a href="#link-url" class="headerlink" title="link:url"></a>link:url</h2><p>这个是独立使用的，输入这个之后，可以搜索出所有与这个网页有关联的网页。也就是我们平时进入网页后，可以在网页底部看到的合作网站。通过这个命令，我们可以不用进入网站就可以查出这个网站与那些网站合作了，明里暗里的都能看到哦。</p>
<h2 id="location："><a href="#location：" class="headerlink" title="location："></a>location：</h2><p>这个命令是为了精确区域而设计的，如你只想查深圳的女子大学的网页，那么就可以这样进行查找：女子大学 location：ShenZhen 这样就会出来深圳区域所有的女子大学相关网页了，而不会把其它地区的女子大学的也搞过来。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Googlehack&quot;&gt;&lt;a href=&quot;#Googlehack&quot; class=&quot;headerlink&quot; title=&quot;Googlehack&quot;&gt;&lt;/a&gt;Googlehack&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;这些命令均为在Google搜索引擎中才能使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;中文引号“-”&quot;&gt;&lt;a href=&quot;#中文引号“-”&quot; class=&quot;headerlink&quot; title=&quot;中文引号“ ”&quot;&gt;&lt;/a&gt;中文引号“ ”&lt;/h2&gt;&lt;p&gt;在搜索关键字时，加上中文的“”号，你就能精确的只搜“”里面的文字了。&lt;/p&gt;
&lt;h2 id=&quot;在搜索词后面加上“site-网站名”：&quot;&gt;&lt;a href=&quot;#在搜索词后面加上“site-网站名”：&quot; class=&quot;headerlink&quot; title=&quot;在搜索词后面加上“site:网站名”：&quot;&gt;&lt;/a&gt;在搜索词后面加上“site:网站名”：&lt;/h2&gt;&lt;p&gt;举个例子吧，就如搜索 白帽 site:sina.com ，那么就能搜索在新浪（sina.com）这个域名下的，有关“白帽”的信息了。&lt;br&gt;搜索出的结果均为新浪网中，与白帽有关的网页&lt;/p&gt;
    
    </summary>
    
      <category term="方法" scheme="http://xuyanbo03.github.io/categories/%E6%96%B9%E6%B3%95/"/>
    
    
      <category term="学习" scheme="http://xuyanbo03.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>CSS学习笔记</title>
    <link href="http://xuyanbo03.github.io/CSSlearn.html"/>
    <id>http://xuyanbo03.github.io/CSSlearn.html</id>
    <published>2017-03-21T16:00:00.000Z</published>
    <updated>2020-02-16T10:34:46.673Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS学习笔记"><a href="#CSS学习笔记" class="headerlink" title="CSS学习笔记"></a>CSS学习笔记</h1><hr>
<h1 id="CSS-Positioning-定位"><a href="#CSS-Positioning-定位" class="headerlink" title="CSS Positioning(定位)"></a>CSS Positioning(定位)</h1><p><strong>CSS定位属性允许你为一个元素定位。它也可以将一个元素放在另一个元素后面，并指定一个元素的内容太大时，应该发生什么。元素可以使用的顶部，底部，左侧和右侧属性定位。然而，这些属性无法工作，除非是先设定position属性。他们也有不同的工作方式，这取决于定位方法</strong></p>
<p><strong>有四种不同的定位方法：</strong></p>
<a id="more"></a>
<h2 id="Static-定位"><a href="#Static-定位" class="headerlink" title="Static 定位"></a>Static 定位</h2><p>HTML元素的默认值，即没有定位，元素出现在正常的流中。</p>
<p>静态定位的元素不会受到top, bottom, left, right影响。</p>
<h2 id="Fixed-定位"><a href="#Fixed-定位" class="headerlink" title="Fixed 定位"></a>Fixed 定位</h2><p>元素的位置相对于浏览器窗口是固定位置，即使窗口是滚动的它也不会移动。</p>
<p>Fixed定位使元素的位置与文档流无关，因此不占据空间。</p>
<p>Fixed定位的元素和其他元素重叠。</p>
<h2 id="Relative-定位"><a href="#Relative-定位" class="headerlink" title="Relative 定位"></a>Relative 定位</h2><p>相对定位元素的定位是相对其正常位置。</p>
<p>可以移动的相对定位元素的内容和相互重叠的元素，它原本所占的空间不会改变。相对定位元素经常被用来作为绝对定位元素的容器块。</p>
<h2 id="Absolute-定位"><a href="#Absolute-定位" class="headerlink" title="Absolute 定位"></a>Absolute 定位</h2><p>绝对定位的元素的位置相对于最近的已定位父元素，如果元素没有已定位的父元素，那么它的位置相对于<html>。</html></p>
<p>Absolutely定位使元素的位置与文档流无关，因此不占据空间。</p>
<p>Absolutely定位的元素和其他元素重叠。</p>
<h1 id="重叠的元素"><a href="#重叠的元素" class="headerlink" title="重叠的元素"></a>重叠的元素</h1><p>元素的定位与文档流无关，所以它们可以覆盖页面上的其它元素。</p>
<p>z-index属性指定了一个元素的堆叠顺序（哪个元素应该放在前面，或后面），一个元素可以有正数或负数的堆叠顺序。</p>
<h1 id="CSS-Float-浮动"><a href="#CSS-Float-浮动" class="headerlink" title="CSS Float(浮动)"></a>CSS Float(浮动)</h1><p><strong>CSS 的 Float（浮动），会使元素向左或向右移动，其周围的元素也会重新排列。<br>Float（浮动），往往是用于图像，但它在布局时一样非常有用。</strong></p>
<h2 id="元素怎样浮动"><a href="#元素怎样浮动" class="headerlink" title="元素怎样浮动"></a>元素怎样浮动</h2><p>元素的水平方向浮动，意味着元素只能左右移动而不能上下移动。</p>
<p>一个浮动元素会尽量向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。</p>
<p>浮动元素之后的元素将围绕它。</p>
<p>浮动元素之前的元素将不会受到影响。</p>
<h2 id="清除浮动-使用-clear"><a href="#清除浮动-使用-clear" class="headerlink" title="清除浮动 - 使用 clear"></a>清除浮动 - 使用 clear</h2><p>元素浮动之后，周围的元素会重新排列，为了避免这种情况，使用 clear 属性。<br>clear 属性指定元素两侧不能出现浮动元素。</p>
<h1 id="常见CSS布局"><a href="#常见CSS布局" class="headerlink" title="常见CSS布局"></a>常见CSS布局</h1><p>双飞翼布局</p>
<p>圣杯布局</p>
<p>流式布局</p>
<h1 id="CSS3-模块"><a href="#CSS3-模块" class="headerlink" title="CSS3 模块"></a>CSS3 模块</h1><p>CSS3被拆分为”模块”。旧规范已拆分成小块，还增加了新的。</p>
<p>一些最重要CSS3模块如下：</p>
<ul>
<li>选择器</li>
<li>盒模型</li>
<li>背景和边框</li>
<li>文字特效</li>
<li>2D/3D转换</li>
<li>动画</li>
<li>多列布局</li>
<li>用户界面</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CSS学习笔记&quot;&gt;&lt;a href=&quot;#CSS学习笔记&quot; class=&quot;headerlink&quot; title=&quot;CSS学习笔记&quot;&gt;&lt;/a&gt;CSS学习笔记&lt;/h1&gt;&lt;hr&gt;
&lt;h1 id=&quot;CSS-Positioning-定位&quot;&gt;&lt;a href=&quot;#CSS-Positioning-定位&quot; class=&quot;headerlink&quot; title=&quot;CSS Positioning(定位)&quot;&gt;&lt;/a&gt;CSS Positioning(定位)&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;CSS定位属性允许你为一个元素定位。它也可以将一个元素放在另一个元素后面，并指定一个元素的内容太大时，应该发生什么。元素可以使用的顶部，底部，左侧和右侧属性定位。然而，这些属性无法工作，除非是先设定position属性。他们也有不同的工作方式，这取决于定位方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有四种不同的定位方法：&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://xuyanbo03.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="html" scheme="http://xuyanbo03.github.io/tags/html/"/>
    
      <category term="css" scheme="http://xuyanbo03.github.io/tags/css/"/>
    
      <category term="javascript" scheme="http://xuyanbo03.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>HTML学习笔记</title>
    <link href="http://xuyanbo03.github.io/HTMLlearn.html"/>
    <id>http://xuyanbo03.github.io/HTMLlearn.html</id>
    <published>2017-03-20T16:00:00.000Z</published>
    <updated>2020-02-16T10:34:46.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML学习笔记"><a href="#HTML学习笔记" class="headerlink" title="HTML学习笔记"></a>HTML学习笔记</h1><hr>
<h1 id="html结构及常用元素"><a href="#html结构及常用元素" class="headerlink" title="html结构及常用元素"></a>html结构及常用元素</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;title&gt;文档标题&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">可见文本...</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;h1&gt;最大的标题&lt;/h1&gt;</div><div class="line">&lt;h2&gt; . . . &lt;/h2&gt;</div><div class="line">&lt;h3&gt; . . . &lt;/h3&gt;</div><div class="line">&lt;h4&gt; . . . &lt;/h4&gt;</div><div class="line">&lt;h5&gt; . . . &lt;/h5&gt;</div><div class="line">&lt;h6&gt;最小的标题&lt;/h6&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;这是一个段落。&lt;/p&gt;</div><div class="line">&lt;br&gt; （换行）</div><div class="line">&lt;hr&gt; （水平线）</div><div class="line">&lt;!-- 这是注释 --&gt;</div><div class="line">&lt;b&gt;粗体文本&lt;/b&gt;</div><div class="line">&lt;code&gt;计算机代码&lt;/code&gt;</div><div class="line">&lt;em&gt;强调文本&lt;/em&gt;</div><div class="line">&lt;i&gt;斜体文本&lt;/i&gt;</div><div class="line">&lt;kbd&gt;键盘输入&lt;/kbd&gt;</div><div class="line">&lt;pre&gt;预格式化文本&lt;/pre&gt;</div><div class="line">&lt;small&gt;更小的文本&lt;/small&gt;</div><div class="line">&lt;strong&gt;重要的文本&lt;/strong&gt;</div><div class="line">&lt;abbr&gt; （缩写）</div><div class="line">&lt;address&gt; （联系信息）</div><div class="line">&lt;bdo&gt; （文字方向）</div><div class="line">&lt;blockquote&gt; （从另一个源引用的部分）</div><div class="line">&lt;cite&gt; （工作的名称）</div><div class="line">&lt;del&gt; （删除的文本）</div><div class="line">&lt;ins&gt; （插入的文本）</div><div class="line">&lt;sub&gt; （下标文本）</div><div class="line">&lt;sup&gt; （上标文本）</div><div class="line"></div><div class="line">普通的链接：&lt;a href=&quot;http://www.example.com/&quot;&gt;链接文本&lt;/a&gt;</div><div class="line">图像链接： &lt;a href=&quot;http://www.example.com/&quot;&gt;&lt;img src=&quot;URL&quot; alt=&quot;替换文本&quot;&gt;&lt;/a&gt;</div><div class="line">邮件链接： &lt;a href=&quot;mailto:webmaster@example.com&quot;&gt;发送e-mail&lt;/a&gt;</div><div class="line"></div><div class="line">书签：</div><div class="line">&lt;a id=&quot;tips&quot;&gt;提示部分&lt;/a&gt;</div><div class="line">&lt;a href=&quot;#tips&quot;&gt;跳到提示部分&lt;/a&gt;</div><div class="line">&lt;img src=&quot;URL&quot; alt=&quot;替换文本&quot; height=&quot;42&quot; width=&quot;42&quot;&gt;</div></pre></td></tr></table></figure>
<h1 id="HTML实例代码"><a href="#HTML实例代码" class="headerlink" title="HTML实例代码"></a>HTML实例代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;文档中的块级元素&lt;/div&gt;</div><div class="line">&lt;span&gt;文档中的内联元素&lt;/span&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">    &lt;li&gt;项目&lt;/li&gt;</div><div class="line">    &lt;li&gt;项目&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;ol&gt;</div><div class="line">    &lt;li&gt;第一项&lt;/li&gt;</div><div class="line">    &lt;li&gt;第二项&lt;/li&gt;</div><div class="line">&lt;/ol&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;table border=&quot;1&quot;&gt;</div><div class="line">  &lt;tr&gt;</div><div class="line">    &lt;th&gt;表格标题&lt;/th&gt;</div><div class="line">    &lt;th&gt;表格标题&lt;/th&gt;</div><div class="line">  &lt;/tr&gt;</div><div class="line">  &lt;tr&gt;</div><div class="line">    &lt;td&gt;表格数据&lt;/td&gt;</div><div class="line">    &lt;td&gt;表格数据&lt;/td&gt;</div><div class="line">  &lt;/tr&gt;</div><div class="line">&lt;/table&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;iframe src=&quot;demo_iframe.htm&quot;&gt;&lt;/iframe&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;form action=&quot;demo_form.php&quot; method=&quot;post/get&quot;&gt;</div><div class="line">&lt;input type=&quot;text&quot; name=&quot;email&quot; size=&quot;40&quot; maxlength=&quot;50&quot;&gt;</div><div class="line">&lt;input type=&quot;password&quot;&gt;</div><div class="line">&lt;input type=&quot;checkbox&quot; checked=&quot;checked&quot;&gt;</div><div class="line">&lt;input type=&quot;radio&quot; checked=&quot;checked&quot;&gt;</div><div class="line">&lt;input type=&quot;submit&quot; value=&quot;Send&quot;&gt;</div><div class="line">&lt;input type=&quot;reset&quot;&gt;</div><div class="line">&lt;input type=&quot;hidden&quot;&gt;</div><div class="line">&lt;select&gt;</div><div class="line">&lt;option&gt;苹果&lt;/option&gt;</div><div class="line">&lt;option selected=&quot;selected&quot;&gt;香蕉&lt;/option&gt;</div><div class="line">&lt;option&gt;樱桃&lt;/option&gt;</div><div class="line">&lt;/select&gt;</div><div class="line">&lt;textarea name=&quot;comment&quot; rows=&quot;60&quot; cols=&quot;20&quot;&gt;&lt;/textarea&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<h1 id="HTML5-中的一些有趣的新特性"><a href="#HTML5-中的一些有趣的新特性" class="headerlink" title="HTML5 中的一些有趣的新特性"></a>HTML5 中的一些有趣的新特性</h1><p>用于绘画的 canvas 元素</p>
<p>用于媒介回放的 video 和 audio 元素</p>
<p>对本地离线存储的更好的支持</p>
<p>新的特殊内容元素，比如 article、footer、header、nav、section</p>
<p>新的表单控件，比如 calendar、date、time、email、url、search</p>
<p>IE9 以下版本浏览器兼容HTML5的方法<br>使用菜鸟教程的静态资源的html5shiv包：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;!--[if lt IE9]&gt;</div><div class="line">&lt;script src=&quot;http://cdn.static.runoob.com/libs/html5shiv/3.7/html5shiv.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;![endif]--&gt;</div></pre></td></tr></table></figure></p>
<p>载入后，初始化新标签的CSS：/<em>html5</em>/<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">article,aside,dialog,footer,header,section,footer,nav,figure,menu&#123;</div><div class="line">  display:block</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>html5shiv.js 引用代码必须放在 <head> 元素中，因为 IE 浏览器在解析 HTML5 新元素时需要先加载该文件。</head></p>
<h1 id="字符实体"><a href="#字符实体" class="headerlink" title="字符实体"></a>字符实体</h1><p>HTML 中的预留字符必须被替换为字符实体。</p>
<p>一些在键盘上找不到的字符也可以使用字符实体来替换。</p>
<p>HTML 中的常用字符实体是：</p>
<ul>
<li>不间断空格(&nbsp;)。</li>
<li>大于&amp;rt；</li>
<li>小于&lt;</li>
<li>引号    &quot;</li>
<li>版权    &copy;    &#169;</li>
<li>注册商标    &reg;    &#174;</li>
<li>商标    &trade;</li>
</ul>
<h1 id="URL-统一资源定位器"><a href="#URL-统一资源定位器" class="headerlink" title="URL - 统一资源定位器"></a>URL - 统一资源定位器</h1><p>Web浏览器通过URL从Web服务器请求页面。当您点击html页面中的某个链接时，对应的 <code>&lt;a&gt;</code>标签指向万维网上的一个地址。</p>
<p>一个统一资源定位器(URL) 用于定位万维网上的文档。</p>
<p><strong>语法规则:</strong></p>
<p><code>scheme://host.domain:port/path/filename</code></p>
<p><strong>说明:</strong></p>
<ul>
<li>scheme - 定义因特网服务的类型。最常见的类型是 http</li>
<li>host - 定义域主机（http 的默认主机是 www）</li>
<li>domain - 定义因特网域名，比如 runoob.com</li>
<li>:port - 定义主机上的端口号（http 的默认端口号是 80）</li>
<li>path - 定义服务器上的路径（如果省略，则文档必须位于网站的根目录中）。</li>
<li>filename - 定义文档/资源的名称</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTML学习笔记&quot;&gt;&lt;a href=&quot;#HTML学习笔记&quot; class=&quot;headerlink&quot; title=&quot;HTML学习笔记&quot;&gt;&lt;/a&gt;HTML学习笔记&lt;/h1&gt;&lt;hr&gt;
&lt;h1 id=&quot;html结构及常用元素&quot;&gt;&lt;a href=&quot;#html结构及常用元素&quot; class=&quot;headerlink&quot; title=&quot;html结构及常用元素&quot;&gt;&lt;/a&gt;html结构及常用元素&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;html&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;head&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;title&amp;gt;文档标题&amp;lt;/title&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/head&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;body&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;可见文本...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://xuyanbo03.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="html" scheme="http://xuyanbo03.github.io/tags/html/"/>
    
      <category term="css" scheme="http://xuyanbo03.github.io/tags/css/"/>
    
      <category term="javascript" scheme="http://xuyanbo03.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>SEO学习笔记</title>
    <link href="http://xuyanbo03.github.io/seo-note.html"/>
    <id>http://xuyanbo03.github.io/seo-note.html</id>
    <published>2017-03-19T16:00:00.000Z</published>
    <updated>2020-02-22T04:04:25.042Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SEO学习笔记"><a href="#SEO学习笔记" class="headerlink" title="SEO学习笔记"></a>SEO学习笔记</h1><blockquote>
<p>搜索引擎工作原理</p>
</blockquote>
<h2 id="SEO简介："><a href="#SEO简介：" class="headerlink" title="SEO简介："></a>SEO简介：</h2><ol>
<li>Search Engine Optimization 搜索引擎优化</li>
<li>白帽SEO</li>
<li>灰帽SEO</li>
</ol>
<h2 id="白帽SEO（内容上的SEO）："><a href="#白帽SEO（内容上的SEO）：" class="headerlink" title="白帽SEO（内容上的SEO）："></a>白帽SEO（内容上的SEO）：</h2><ol>
<li>网站标题、关键字、描述</li>
<li>网站内容优化</li>
<li>Robot.txt文件</li>
<li>网站地图</li>
<li>增加外链引用</li>
</ol>
<a id="more"></a>
<h2 id="SEO注意要点："><a href="#SEO注意要点：" class="headerlink" title="SEO注意要点："></a>SEO注意要点：</h2><ul>
<li><p>结构布局优化：用扁平化结构（层次结构超过三层小蜘蛛就不愿意爬了）</p>
</li>
<li><p>控制首页链接数量（中小网站100以内，页面导航、底部导航、锚文字链接等）</p>
</li>
<li><p>扁平化的目录层次（小蜘蛛跳转3次可以到达网站内任何一个内页，网站的设计主页、栏目、内容页，不要用纵线性的结构）</p>
</li>
<li><p>导航seo优化（头部、底部、内容部分，主导航、副导航、分类导航，尽量用文字，面包屑导航，在每个网站上留下面包屑，使用户可以了解网站组织形式，放于正文的左上方）</p>
</li>
<li><p>内容页面的布局细节</p>
<ul>
<li>左面正文，右面热门文章、相关文章，下面是版权信息及链接，栏目排布：首页123456789下拉选择最赞）</li>
</ul>
</li>
<li><p>网站的加载速度会影响小蜘蛛的爬行，页面最好不要超过100k</p>
</li>
<li><p>网页代码优化（语义化代码）</p>
<ul>
<li>title标题：强调重点</li>
<li>meta keywords关键词：列举几个关键词/简洁高效词语</li>
<li>meta description网页描述：高度概括网页的内容</li>
<li>以上信息不要堆积、重复</li>
</ul>
</li>
</ul>
<h2 id="有利搜索引擎"><a href="#有利搜索引擎" class="headerlink" title="有利搜索引擎"></a>有利搜索引擎</h2><ol>
<li><p>a：访问外部链接时要加上<figure class="highlight plain"><figcaption><span>title 说明</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">2. h1：搜索引擎外认为 h1 最重要，使用 css 调整，网页正文标题用 h1，副标题用 h2，其他不要乱用 h 标签</div><div class="line"></div><div class="line">3. br 用于文本间的换行，用在 p 内，也可以用 ```&lt;p&gt;&lt;br/&gt;&lt;/p&gt; ```表示空行</div><div class="line"></div><div class="line">4. caption：表格标题</div><div class="line"></div><div class="line">5. img：使用 title、alt 说明</div><div class="line"></div><div class="line">6. ```&lt;strong&gt;&lt;em&gt;```表示强调，```&lt;em&gt;```的权重仅次于```&lt;strong&gt;```，如果只想表示加粗斜体，建议使用```&lt;b&gt;&lt;i&gt;```,表示强调则使用```&lt;strong&gt;&lt;em&gt;</div></pre></td></tr></table></figure></p>
</li>
<li><p>重要内容 HTML 代码放在最前面（使用 css 改变布局）</p>
</li>
<li><p>重要内容不要用 JS 输出（搜索引擎看不懂 JS）</p>
</li>
<li><p>尽量少使用 iframe 框架（搜索引擎不喜欢）</p>
</li>
<li><p>谨慎使用<code>display:none</code>（搜索引擎会过滤掉其内容，设置 z-index/text-index 代替）</p>
</li>
<li><p>精简代码</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SEO学习笔记&quot;&gt;&lt;a href=&quot;#SEO学习笔记&quot; class=&quot;headerlink&quot; title=&quot;SEO学习笔记&quot;&gt;&lt;/a&gt;SEO学习笔记&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;搜索引擎工作原理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;SEO简介：&quot;&gt;&lt;a href=&quot;#SEO简介：&quot; class=&quot;headerlink&quot; title=&quot;SEO简介：&quot;&gt;&lt;/a&gt;SEO简介：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Search Engine Optimization 搜索引擎优化&lt;/li&gt;
&lt;li&gt;白帽SEO&lt;/li&gt;
&lt;li&gt;灰帽SEO&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;白帽SEO（内容上的SEO）：&quot;&gt;&lt;a href=&quot;#白帽SEO（内容上的SEO）：&quot; class=&quot;headerlink&quot; title=&quot;白帽SEO（内容上的SEO）：&quot;&gt;&lt;/a&gt;白帽SEO（内容上的SEO）：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;网站标题、关键字、描述&lt;/li&gt;
&lt;li&gt;网站内容优化&lt;/li&gt;
&lt;li&gt;Robot.txt文件&lt;/li&gt;
&lt;li&gt;网站地图&lt;/li&gt;
&lt;li&gt;增加外链引用&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="web" scheme="http://xuyanbo03.github.io/categories/web/"/>
    
    
      <category term="seo" scheme="http://xuyanbo03.github.io/tags/seo/"/>
    
  </entry>
  
  <entry>
    <title>提升效率</title>
    <link href="http://xuyanbo03.github.io/enhance-efficiency.html"/>
    <id>http://xuyanbo03.github.io/enhance-efficiency.html</id>
    <published>2017-03-18T16:00:00.000Z</published>
    <updated>2020-02-22T02:40:15.469Z</updated>
    
    <content type="html"><![CDATA[<h1 id="提升效率"><a href="#提升效率" class="headerlink" title="提升效率"></a>提升效率</h1><blockquote>
<p>在前进的路上，放弃那些次要的、可有可无的东西，获取真正重要、有意义的价值，让自己更加认同自己的付出和努力方向，这才是时间管理的本质和最大意义所在。</p>
</blockquote>
<h2 id="必须学会说“不”"><a href="#必须学会说“不”" class="headerlink" title="必须学会说“不”"></a>必须学会说“不”</h2><p>说“不”其实是个非常艰难的事情，可是如果不说no，那么就很难专心地应对真正重要的任务。因为有太多看起来不错的机会、看上去不能拒绝的要求、事成后有利的图景，以及无法拒绝的人情世故，诱惑着你答应下来。</p>
<p>其实工作越久，你就越会发现，真正的牛人，往往就牛在敢于放弃上。所谓的战略化决策，不仅仅是指战略高度的选择，也指战略高度的放弃。刚开始放弃的时候会很难受，这是多年形成的习惯和求全责备的心态发出的尖叫和抗议。可是时间久了才发现：不重要的事情真做不完也不会死，倒是重要的事情老拖着不做往往会后果比较严重。</p>
<a id="more"></a>
<h2 id="必须学会说yes"><a href="#必须学会说yes" class="headerlink" title="必须学会说yes"></a>必须学会说yes</h2><p>对我而言，如果想要找时间完成真正重要的事情，那么就先答应下来，再商量个相对宽裕的时间。将这些定下来之后，我总能想出方法，排除万难去实践。</p>
<p>无论是写小说、开公众号、参加考试，都可以遵循这个套路。牺牲掉部分娱乐、睡眠、社交，甚至是和家人团聚的时间，会非常适合短期内的明确目标，并督促你用冲刺的方式完成。</p>
<p>如果一件事情并不重要，那么就明确地拒绝；如果很重要，就大胆地接受。你不会因为说“不”损失多少，也不会因为应承去做却没有做好而损失很多。真正的损失是在我们说“这事儿很好，我再想想”中发生的。</p>
<h2 id="金钱换时间"><a href="#金钱换时间" class="headerlink" title="金钱换时间"></a>金钱换时间</h2><p>以前没有孩子的时候，我习惯利用整块时间写作，写作进入状态也非常缓慢，必须要在阳光充足的某个角落坐下，泡杯咖啡，看看新闻，再慢慢进入状态。</p>
<p>现在可用的业余时间往往是零散的，如果不能抓住零散时间进行思考和打草稿，那就更没有时间了。为了能更好地抓住这些碎片时间，我添置了更多的电子设备，例如静音且无须插电源的平板电脑，它能让我更好地利用孩子入睡后的时间。再比如我打破了从前不下载App的习惯，安装了多个阅读、记录、拍照笔记类的App，方便自己在零碎时间里能随时把读到的、想到的、看到的、诱发灵感的材料都尽快地收纳进来。</p>
<p>找到时间后，就是筹划和管理时间了。</p>
<h2 id="关掉提醒，高效专注地工作"><a href="#关掉提醒，高效专注地工作" class="headerlink" title="关掉提醒，高效专注地工作"></a>关掉提醒，高效专注地工作</h2><p>要想工作有效，就必须运用整块的时间。如果将时间分割开来零星使用，纵然时间总和相同，但其效果与整块运用时间的效果却差距很大。比如我以前工作时常要写一些措辞讲究的英文邮件，如果能够聚精会神地写，再加上润色，十几分钟就能完成。可是我总会忍不住一边写一边去看看什么人又说了什么话，有时还会因为查某个单词去逛下红迪网。</p>
<p>后来实在忙起来了，任凭各种新信息提醒也不去查看，等到某个任务告一段落，再统一查看和回复，既保证了效率，又不至于错过什么。仅这一项小小的改变，就大大提高了我的工作效率。</p>
<h2 id="减少选项，设置优先级"><a href="#减少选项，设置优先级" class="headerlink" title="减少选项，设置优先级"></a>减少选项，设置优先级</h2><p>选项越少，时间越多。一个比较经典的时间管理方法是：每天只选择1～3件事情去做，并辅以不懈地追求。你的本能不会喜欢这样的限制，可是这种方法有利于排列真正重要的事情，比起事无巨细地齐头并进，能让工作更为出色。</p>
<h2 id="提前把你想到的写下来"><a href="#提前把你想到的写下来" class="headerlink" title="提前把你想到的写下来"></a>提前把你想到的写下来</h2><p>当事情一旦多了杂了，脑子就明显不够用。我经常发现，哪怕是小事，如果写下来就会遵守；不写，无论在脑子里想多久，一被打扰就会忘掉。提前计划的目的其实不是为了“计划”，而是为了更重视时间的流向，知道时间都花到哪里去了。</p>
<p>如果不是很清晰地知道要做什么，就容易碰到什么是什么。于是哪件事情先找上来就先处理了，就好比我特别反感邮箱，因为邮件不停地进来，叮的一声响。只要邮箱的叮声不关，我就永远干不了该干的事情，会一直挂在邮箱上回复邮件，而且要一会儿回邮件，一会儿写报告，一会儿又查数据。数据查到一半叮的一声邮件又进来了，说到了另一件事，再去查……忙了一上午，几件重要的大事却一件都没干。</p>
<p>先把所有需要完成的事列出来，然后对大任务进行分解，分解成小一些的子任务，再对任务进行排序。排序时最艰难的步骤就是决定放弃或者推迟哪些东西。</p>
<h2 id="找到适合自己的好方法"><a href="#找到适合自己的好方法" class="headerlink" title="找到适合自己的好方法"></a>找到适合自己的好方法</h2><p>开始时间管理的时候，大家都会热衷于搜罗和学习各种方法。比如有一种著名的战拖策略叫作“吃掉那只青蛙”，鼓励大家给最重要、最困难的任务以第一优先权。但是我在实践之后，却发现这个方法极其不适合我。因为如果一上来就强迫自己完成最艰巨的任务，我反而会容易知难而退，会造成各种拖延。所以我摸索出的合适自己的方法是先完成最简单、最有兴趣的工作，通过这些初级工作渐入佳境，等效率上来了，再去啃“坚硬的骨头”。</p>
<p>说到这里，时间管理却还不能结束。桥本和彦曾经说过，“没有体现结果的时间管理就不能称之为时间管理”，因此定期对时间管理的成就和不足之处进行反思，就有非常重要的意义。</p>
<p>坚持时间管理最大的挑战就在于：即便你用最高科技的工具，按照最合理的科学方法、符合生物钟的方法规划好了时间，然后恪守，一天下来有很大的收获，你的内心也在呼唤你歪倒在沙发上刷手机、追美剧、和朋友瞎聊。</p>
<p>为了战胜无时不在的诱惑，就需要时不时地重温一下目标，配合着各种短期、中期、长期的目标，时间管理上也应相应配合着进行松弛有度的分布。任何时间管理和战拖秘诀都离不开恒心，但是生活必须要张弛有度。</p>
<p>如果是学生为了考GRE，那么两个月的短期突击式的冲刺，要比断断续续地复习一年有效；而大考完毕，可以有一小段时间让大脑放松下，以便进入下一阶段的目标。</p>
<p>一个人如果长期无目标地疲劳战斗，那么时间管理便会沦为空谈，你依旧会身心俱疲且内心无比迷茫，那样的话还不如好好歇着。</p>
<p>当然，如果把时间管理放到整个人生来看，有些人喜欢有计划、高产高效的生活，也有人喜欢随性自由的节奏。这些都没有问题，你尽可以按自己的喜好选择自己喜欢的方式。不过要记住，每种选择都意味着相应的放弃，只要回过头时不会患得患失就好。</p>
<p>对很多人而言，时间管理也是一种成就。他们对时间管理的追求，就是对成就感的追求，这也是他们进行时间管理的最大动力。</p>
<p>如果是这种情况，那么拥有一个能完成后打钩的to-dolist（待办事项列表）或者任务工作本、相关任务管理App，让这种成就可视化，就是很好的选择。</p>
<p>对我个人而言，时间管理的最大成功，不是达成了什么了不起的大成就，而是让自己能更明晰时间的去向、对事物的价值度有所衡量，并通过“管理时间”这一具体行动，让自己不再盲目焦虑。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在前进的路上，放弃那些次要的、可有可无的东西，获取真正重要、有意义的价值，让自己更加认同自己的付出和努力方向，这才是时间管理的本质和最大意义所在。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;提升效率&quot;&gt;&lt;a href=&quot;#提升效率&quot; class=&quot;headerlink&quot; title=&quot;提升效率&quot;&gt;&lt;/a&gt;提升效率&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在前进的路上，放弃那些次要的、可有可无的东西，获取真正重要、有意义的价值，让自己更加认同自己的付出和努力方向，这才是时间管理的本质和最大意义所在。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;必须学会说“不”&quot;&gt;&lt;a href=&quot;#必须学会说“不”&quot; class=&quot;headerlink&quot; title=&quot;必须学会说“不”&quot;&gt;&lt;/a&gt;必须学会说“不”&lt;/h2&gt;&lt;p&gt;说“不”其实是个非常艰难的事情，可是如果不说no，那么就很难专心地应对真正重要的任务。因为有太多看起来不错的机会、看上去不能拒绝的要求、事成后有利的图景，以及无法拒绝的人情世故，诱惑着你答应下来。&lt;/p&gt;
&lt;p&gt;其实工作越久，你就越会发现，真正的牛人，往往就牛在敢于放弃上。所谓的战略化决策，不仅仅是指战略高度的选择，也指战略高度的放弃。刚开始放弃的时候会很难受，这是多年形成的习惯和求全责备的心态发出的尖叫和抗议。可是时间久了才发现：不重要的事情真做不完也不会死，倒是重要的事情老拖着不做往往会后果比较严重。&lt;/p&gt;
    
    </summary>
    
      <category term="方法" scheme="http://xuyanbo03.github.io/categories/%E6%96%B9%E6%B3%95/"/>
    
    
      <category term="方法" scheme="http://xuyanbo03.github.io/tags/%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
</feed>
